
finalproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002254  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00002254  000022e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000ee  008000ee  00002376  2**0
                  ALLOC
  3 .stab         00001e18  00000000  00000000  00002378  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c2a  00000000  00000000  00004190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000506a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000894c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009507  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ee       	ldi	r26, 0xEE	; 238
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3f       	cpi	r26, 0xF3	; 243
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 28 11 	jmp	0x2250	; 0x2250 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ee       	ldi	r26, 0xE6	; 230
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 ee       	ldi	r24, 0xE6	; 230
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void sendPassword(uint8 * passwordArray);
/*******************************************************************************
 *                       	Main Code                                    *
 *******************************************************************************/

void main(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6e 97       	sbiw	r28, 0x1e	; 30
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	SREG |=(1<<7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24
	UART_init();//initialize UART
     b68:	0e 94 00 10 	call	0x2000	; 0x2000 <UART_init>
	LCD_init();//initialize LCD
     b6c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <LCD_init>
	initializePassword(); //initialize first-time password
     b70:	0e 94 c5 07 	call	0xf8a	; 0xf8a <initializePassword>
	DisplayOptions();//Display Options
     b74:	0e 94 ae 07 	call	0xf5c	; 0xf5c <DisplayOptions>

	uint8 receivedByte=0,key=0;
     b78:	1e 8e       	std	Y+30, r1	; 0x1e
     b7a:	1d 8e       	std	Y+29, r1	; 0x1d
	while(1){
		key = KeyPad_getPressedKey();
     b7c:	0e 94 3e 0a 	call	0x147c	; 0x147c <KeyPad_getPressedKey>
     b80:	8d 8f       	std	Y+29, r24	; 0x1d
		if (key == '+') {
     b82:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b84:	8b 32       	cpi	r24, 0x2B	; 43
     b86:	09 f0       	breq	.+2      	; 0xb8a <main+0x44>
     b88:	9c c0       	rjmp	.+312    	; 0xcc2 <main+0x17c>
			LCD_clearScreen();
     b8a:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_clearScreen>
			LCD_displayString("Enter Password");
     b8e:	80 e6       	ldi	r24, 0x60	; 96
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LCD_displayString>
			getPassword(password);
     b96:	8f ee       	ldi	r24, 0xEF	; 239
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 03 07 	call	0xe06	; 0xe06 <getPassword>
			UART_sendByte(WAIT1);
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	0e 94 1a 10 	call	0x2034	; 0x2034 <UART_sendByte>
			sendPassword(password);
     ba4:	8f ee       	ldi	r24, 0xEF	; 239
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 a3 09 	call	0x1346	; 0x1346 <sendPassword>
			UART_sendByte('+');
     bac:	8b e2       	ldi	r24, 0x2B	; 43
     bae:	0e 94 1a 10 	call	0x2034	; 0x2034 <UART_sendByte>
			receivedByte = UART_recieveByte();
     bb2:	0e 94 31 10 	call	0x2062	; 0x2062 <UART_recieveByte>
     bb6:	8e 8f       	std	Y+30, r24	; 0x1e
			if (receivedByte == WAIT4) {
     bb8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bba:	84 30       	cpi	r24, 0x04	; 4
     bbc:	19 f4       	brne	.+6      	; 0xbc4 <main+0x7e>
				DoorOpeningTask();
     bbe:	0e 94 9a 08 	call	0x1134	; 0x1134 <DoorOpeningTask>
     bc2:	7c c0       	rjmp	.+248    	; 0xcbc <main+0x176>

			} else if (receivedByte == WAIT5) {
     bc4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bc6:	85 30       	cpi	r24, 0x05	; 5
     bc8:	09 f0       	breq	.+2      	; 0xbcc <main+0x86>
     bca:	78 c0       	rjmp	.+240    	; 0xcbc <main+0x176>
				LCD_clearScreen();
     bcc:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_clearScreen>
				LCD_displayString("Wrong password");
     bd0:	8f e6       	ldi	r24, 0x6F	; 111
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LCD_displayString>
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	aa e7       	ldi	r26, 0x7A	; 122
     bde:	b4 e4       	ldi	r27, 0x44	; 68
     be0:	89 8f       	std	Y+25, r24	; 0x19
     be2:	9a 8f       	std	Y+26, r25	; 0x1a
     be4:	ab 8f       	std	Y+27, r26	; 0x1b
     be6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     be8:	69 8d       	ldd	r22, Y+25	; 0x19
     bea:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	4a e7       	ldi	r20, 0x7A	; 122
     bf6:	53 e4       	ldi	r21, 0x43	; 67
     bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	8d 8b       	std	Y+21, r24	; 0x15
     c02:	9e 8b       	std	Y+22, r25	; 0x16
     c04:	af 8b       	std	Y+23, r26	; 0x17
     c06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c08:	6d 89       	ldd	r22, Y+21	; 0x15
     c0a:	7e 89       	ldd	r23, Y+22	; 0x16
     c0c:	8f 89       	ldd	r24, Y+23	; 0x17
     c0e:	98 8d       	ldd	r25, Y+24	; 0x18
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e8       	ldi	r20, 0x80	; 128
     c16:	5f e3       	ldi	r21, 0x3F	; 63
     c18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c1c:	88 23       	and	r24, r24
     c1e:	2c f4       	brge	.+10     	; 0xc2a <main+0xe4>
		__ticks = 1;
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	9c 8b       	std	Y+20, r25	; 0x14
     c26:	8b 8b       	std	Y+19, r24	; 0x13
     c28:	3f c0       	rjmp	.+126    	; 0xca8 <main+0x162>
	else if (__tmp > 65535)
     c2a:	6d 89       	ldd	r22, Y+21	; 0x15
     c2c:	7e 89       	ldd	r23, Y+22	; 0x16
     c2e:	8f 89       	ldd	r24, Y+23	; 0x17
     c30:	98 8d       	ldd	r25, Y+24	; 0x18
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	3f ef       	ldi	r19, 0xFF	; 255
     c36:	4f e7       	ldi	r20, 0x7F	; 127
     c38:	57 e4       	ldi	r21, 0x47	; 71
     c3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c3e:	18 16       	cp	r1, r24
     c40:	4c f5       	brge	.+82     	; 0xc94 <main+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c42:	69 8d       	ldd	r22, Y+25	; 0x19
     c44:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c46:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c48:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	40 e2       	ldi	r20, 0x20	; 32
     c50:	51 e4       	ldi	r21, 0x41	; 65
     c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	bc 01       	movw	r22, r24
     c5c:	cd 01       	movw	r24, r26
     c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	9c 8b       	std	Y+20, r25	; 0x14
     c68:	8b 8b       	std	Y+19, r24	; 0x13
     c6a:	0f c0       	rjmp	.+30     	; 0xc8a <main+0x144>
     c6c:	89 e1       	ldi	r24, 0x19	; 25
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	9a 8b       	std	Y+18, r25	; 0x12
     c72:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c74:	89 89       	ldd	r24, Y+17	; 0x11
     c76:	9a 89       	ldd	r25, Y+18	; 0x12
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <main+0x132>
     c7c:	9a 8b       	std	Y+18, r25	; 0x12
     c7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c80:	8b 89       	ldd	r24, Y+19	; 0x13
     c82:	9c 89       	ldd	r25, Y+20	; 0x14
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	9c 8b       	std	Y+20, r25	; 0x14
     c88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c8a:	8b 89       	ldd	r24, Y+19	; 0x13
     c8c:	9c 89       	ldd	r25, Y+20	; 0x14
     c8e:	00 97       	sbiw	r24, 0x00	; 0
     c90:	69 f7       	brne	.-38     	; 0xc6c <main+0x126>
     c92:	14 c0       	rjmp	.+40     	; 0xcbc <main+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c94:	6d 89       	ldd	r22, Y+21	; 0x15
     c96:	7e 89       	ldd	r23, Y+22	; 0x16
     c98:	8f 89       	ldd	r24, Y+23	; 0x17
     c9a:	98 8d       	ldd	r25, Y+24	; 0x18
     c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	9c 8b       	std	Y+20, r25	; 0x14
     ca6:	8b 8b       	std	Y+19, r24	; 0x13
     ca8:	8b 89       	ldd	r24, Y+19	; 0x13
     caa:	9c 89       	ldd	r25, Y+20	; 0x14
     cac:	98 8b       	std	Y+16, r25	; 0x10
     cae:	8f 87       	std	Y+15, r24	; 0x0f
     cb0:	8f 85       	ldd	r24, Y+15	; 0x0f
     cb2:	98 89       	ldd	r25, Y+16	; 0x10
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <main+0x16e>
     cb8:	98 8b       	std	Y+16, r25	; 0x10
     cba:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(DISPLAY_MESSAGE_DELAY);
			}
			DisplayOptions();
     cbc:	0e 94 ae 07 	call	0xf5c	; 0xf5c <DisplayOptions>
     cc0:	5d cf       	rjmp	.-326    	; 0xb7c <main+0x36>


		} else if (key == '-') {
     cc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cc4:	8d 32       	cpi	r24, 0x2D	; 45
     cc6:	09 f0       	breq	.+2      	; 0xcca <main+0x184>
     cc8:	59 cf       	rjmp	.-334    	; 0xb7c <main+0x36>
			LCD_clearScreen();
     cca:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_clearScreen>
			LCD_displayString("Enter Password");
     cce:	80 e6       	ldi	r24, 0x60	; 96
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LCD_displayString>
			getPassword(password);
     cd6:	8f ee       	ldi	r24, 0xEF	; 239
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 03 07 	call	0xe06	; 0xe06 <getPassword>
			UART_sendByte(WAIT1);
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	0e 94 1a 10 	call	0x2034	; 0x2034 <UART_sendByte>
			sendPassword(password);
     ce4:	8f ee       	ldi	r24, 0xEF	; 239
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 a3 09 	call	0x1346	; 0x1346 <sendPassword>
			UART_sendByte(WAIT3);
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	0e 94 1a 10 	call	0x2034	; 0x2034 <UART_sendByte>

			receivedByte = UART_recieveByte();
     cf2:	0e 94 31 10 	call	0x2062	; 0x2062 <UART_recieveByte>
     cf6:	8e 8f       	std	Y+30, r24	; 0x1e
			if (receivedByte == WAIT6) {
     cf8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cfa:	86 30       	cpi	r24, 0x06	; 6
     cfc:	29 f4       	brne	.+10     	; 0xd08 <main+0x1c2>
				initializePassword();
     cfe:	0e 94 c5 07 	call	0xf8a	; 0xf8a <initializePassword>
				LCD_clearScreen();
     d02:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_clearScreen>
     d06:	7c c0       	rjmp	.+248    	; 0xe00 <main+0x2ba>
			} else if (receivedByte == WAIT5) {
     d08:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d0a:	85 30       	cpi	r24, 0x05	; 5
     d0c:	09 f0       	breq	.+2      	; 0xd10 <main+0x1ca>
     d0e:	78 c0       	rjmp	.+240    	; 0xe00 <main+0x2ba>
				LCD_clearScreen();
     d10:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_clearScreen>
				LCD_displayString("Wrong password");
     d14:	8f e6       	ldi	r24, 0x6F	; 111
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LCD_displayString>
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	aa e7       	ldi	r26, 0x7A	; 122
     d22:	b4 e4       	ldi	r27, 0x44	; 68
     d24:	8b 87       	std	Y+11, r24	; 0x0b
     d26:	9c 87       	std	Y+12, r25	; 0x0c
     d28:	ad 87       	std	Y+13, r26	; 0x0d
     d2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d30:	8d 85       	ldd	r24, Y+13	; 0x0d
     d32:	9e 85       	ldd	r25, Y+14	; 0x0e
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	4a e7       	ldi	r20, 0x7A	; 122
     d3a:	53 e4       	ldi	r21, 0x43	; 67
     d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	8f 83       	std	Y+7, r24	; 0x07
     d46:	98 87       	std	Y+8, r25	; 0x08
     d48:	a9 87       	std	Y+9, r26	; 0x09
     d4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d4c:	6f 81       	ldd	r22, Y+7	; 0x07
     d4e:	78 85       	ldd	r23, Y+8	; 0x08
     d50:	89 85       	ldd	r24, Y+9	; 0x09
     d52:	9a 85       	ldd	r25, Y+10	; 0x0a
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e8       	ldi	r20, 0x80	; 128
     d5a:	5f e3       	ldi	r21, 0x3F	; 63
     d5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d60:	88 23       	and	r24, r24
     d62:	2c f4       	brge	.+10     	; 0xd6e <main+0x228>
		__ticks = 1;
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	9e 83       	std	Y+6, r25	; 0x06
     d6a:	8d 83       	std	Y+5, r24	; 0x05
     d6c:	3f c0       	rjmp	.+126    	; 0xdec <main+0x2a6>
	else if (__tmp > 65535)
     d6e:	6f 81       	ldd	r22, Y+7	; 0x07
     d70:	78 85       	ldd	r23, Y+8	; 0x08
     d72:	89 85       	ldd	r24, Y+9	; 0x09
     d74:	9a 85       	ldd	r25, Y+10	; 0x0a
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	3f ef       	ldi	r19, 0xFF	; 255
     d7a:	4f e7       	ldi	r20, 0x7F	; 127
     d7c:	57 e4       	ldi	r21, 0x47	; 71
     d7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d82:	18 16       	cp	r1, r24
     d84:	4c f5       	brge	.+82     	; 0xdd8 <main+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d86:	6b 85       	ldd	r22, Y+11	; 0x0b
     d88:	7c 85       	ldd	r23, Y+12	; 0x0c
     d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	40 e2       	ldi	r20, 0x20	; 32
     d94:	51 e4       	ldi	r21, 0x41	; 65
     d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	bc 01       	movw	r22, r24
     da0:	cd 01       	movw	r24, r26
     da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	9e 83       	std	Y+6, r25	; 0x06
     dac:	8d 83       	std	Y+5, r24	; 0x05
     dae:	0f c0       	rjmp	.+30     	; 0xdce <main+0x288>
     db0:	89 e1       	ldi	r24, 0x19	; 25
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	9c 83       	std	Y+4, r25	; 0x04
     db6:	8b 83       	std	Y+3, r24	; 0x03
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	9c 81       	ldd	r25, Y+4	; 0x04
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <main+0x276>
     dc0:	9c 83       	std	Y+4, r25	; 0x04
     dc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc4:	8d 81       	ldd	r24, Y+5	; 0x05
     dc6:	9e 81       	ldd	r25, Y+6	; 0x06
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	9e 83       	std	Y+6, r25	; 0x06
     dcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dce:	8d 81       	ldd	r24, Y+5	; 0x05
     dd0:	9e 81       	ldd	r25, Y+6	; 0x06
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	69 f7       	brne	.-38     	; 0xdb0 <main+0x26a>
     dd6:	14 c0       	rjmp	.+40     	; 0xe00 <main+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd8:	6f 81       	ldd	r22, Y+7	; 0x07
     dda:	78 85       	ldd	r23, Y+8	; 0x08
     ddc:	89 85       	ldd	r24, Y+9	; 0x09
     dde:	9a 85       	ldd	r25, Y+10	; 0x0a
     de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de4:	dc 01       	movw	r26, r24
     de6:	cb 01       	movw	r24, r22
     de8:	9e 83       	std	Y+6, r25	; 0x06
     dea:	8d 83       	std	Y+5, r24	; 0x05
     dec:	8d 81       	ldd	r24, Y+5	; 0x05
     dee:	9e 81       	ldd	r25, Y+6	; 0x06
     df0:	9a 83       	std	Y+2, r25	; 0x02
     df2:	89 83       	std	Y+1, r24	; 0x01
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	9a 81       	ldd	r25, Y+2	; 0x02
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <main+0x2b2>
     dfc:	9a 83       	std	Y+2, r25	; 0x02
     dfe:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(DISPLAY_MESSAGE_DELAY);
			}
			DisplayOptions();
     e00:	0e 94 ae 07 	call	0xf5c	; 0xf5c <DisplayOptions>
     e04:	bb ce       	rjmp	.-650    	; 0xb7c <main+0x36>

00000e06 <getPassword>:

/*******************************************************************************
 *                      		Functions                                   *
 *******************************************************************************/

void getPassword(uint8 * arrayName){
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	63 97       	sbiw	r28, 0x13	; 19
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	9b 8b       	std	Y+19, r25	; 0x13
     e1c:	8a 8b       	std	Y+18, r24	; 0x12
	LCD_goToRowColumn(1, 0);
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <LCD_goToRowColumn>
	uint8 key;
	for(int i=0;i<PASSWORD_LENGTH;i++){
     e26:	18 8a       	std	Y+16, r1	; 0x10
     e28:	1f 86       	std	Y+15, r1	; 0x0f
     e2a:	89 c0       	rjmp	.+274    	; 0xf3e <getPassword+0x138>
		key = KeyPad_getPressedKey();
     e2c:	0e 94 3e 0a 	call	0x147c	; 0x147c <KeyPad_getPressedKey>
     e30:	89 8b       	std	Y+17, r24	; 0x11
		if (key >= 0 && key <= 9) {
     e32:	89 89       	ldd	r24, Y+17	; 0x11
     e34:	8a 30       	cpi	r24, 0x0A	; 10
     e36:	60 f4       	brcc	.+24     	; 0xe50 <getPassword+0x4a>
			LCD_displayCharacter('*');
     e38:	8a e2       	ldi	r24, 0x2A	; 42
     e3a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LCD_displayCharacter>
			*(arrayName + i) = key;
     e3e:	2f 85       	ldd	r18, Y+15	; 0x0f
     e40:	38 89       	ldd	r19, Y+16	; 0x10
     e42:	8a 89       	ldd	r24, Y+18	; 0x12
     e44:	9b 89       	ldd	r25, Y+19	; 0x13
     e46:	fc 01       	movw	r30, r24
     e48:	e2 0f       	add	r30, r18
     e4a:	f3 1f       	adc	r31, r19
     e4c:	89 89       	ldd	r24, Y+17	; 0x11
     e4e:	80 83       	st	Z, r24
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	aa ef       	ldi	r26, 0xFA	; 250
     e56:	b3 e4       	ldi	r27, 0x43	; 67
     e58:	8b 87       	std	Y+11, r24	; 0x0b
     e5a:	9c 87       	std	Y+12, r25	; 0x0c
     e5c:	ad 87       	std	Y+13, r26	; 0x0d
     e5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e60:	6b 85       	ldd	r22, Y+11	; 0x0b
     e62:	7c 85       	ldd	r23, Y+12	; 0x0c
     e64:	8d 85       	ldd	r24, Y+13	; 0x0d
     e66:	9e 85       	ldd	r25, Y+14	; 0x0e
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	4a e7       	ldi	r20, 0x7A	; 122
     e6e:	53 e4       	ldi	r21, 0x43	; 67
     e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	8f 83       	std	Y+7, r24	; 0x07
     e7a:	98 87       	std	Y+8, r25	; 0x08
     e7c:	a9 87       	std	Y+9, r26	; 0x09
     e7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e80:	6f 81       	ldd	r22, Y+7	; 0x07
     e82:	78 85       	ldd	r23, Y+8	; 0x08
     e84:	89 85       	ldd	r24, Y+9	; 0x09
     e86:	9a 85       	ldd	r25, Y+10	; 0x0a
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e8       	ldi	r20, 0x80	; 128
     e8e:	5f e3       	ldi	r21, 0x3F	; 63
     e90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e94:	88 23       	and	r24, r24
     e96:	2c f4       	brge	.+10     	; 0xea2 <getPassword+0x9c>
		__ticks = 1;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9e 83       	std	Y+6, r25	; 0x06
     e9e:	8d 83       	std	Y+5, r24	; 0x05
     ea0:	3f c0       	rjmp	.+126    	; 0xf20 <getPassword+0x11a>
	else if (__tmp > 65535)
     ea2:	6f 81       	ldd	r22, Y+7	; 0x07
     ea4:	78 85       	ldd	r23, Y+8	; 0x08
     ea6:	89 85       	ldd	r24, Y+9	; 0x09
     ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	3f ef       	ldi	r19, 0xFF	; 255
     eae:	4f e7       	ldi	r20, 0x7F	; 127
     eb0:	57 e4       	ldi	r21, 0x47	; 71
     eb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eb6:	18 16       	cp	r1, r24
     eb8:	4c f5       	brge	.+82     	; 0xf0c <getPassword+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eba:	6b 85       	ldd	r22, Y+11	; 0x0b
     ebc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ebe:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e2       	ldi	r20, 0x20	; 32
     ec8:	51 e4       	ldi	r21, 0x41	; 65
     eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	bc 01       	movw	r22, r24
     ed4:	cd 01       	movw	r24, r26
     ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	9e 83       	std	Y+6, r25	; 0x06
     ee0:	8d 83       	std	Y+5, r24	; 0x05
     ee2:	0f c0       	rjmp	.+30     	; 0xf02 <getPassword+0xfc>
     ee4:	89 e1       	ldi	r24, 0x19	; 25
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9c 83       	std	Y+4, r25	; 0x04
     eea:	8b 83       	std	Y+3, r24	; 0x03
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	9c 81       	ldd	r25, Y+4	; 0x04
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <getPassword+0xea>
     ef4:	9c 83       	std	Y+4, r25	; 0x04
     ef6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef8:	8d 81       	ldd	r24, Y+5	; 0x05
     efa:	9e 81       	ldd	r25, Y+6	; 0x06
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	9e 83       	std	Y+6, r25	; 0x06
     f00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f02:	8d 81       	ldd	r24, Y+5	; 0x05
     f04:	9e 81       	ldd	r25, Y+6	; 0x06
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	69 f7       	brne	.-38     	; 0xee4 <getPassword+0xde>
     f0a:	14 c0       	rjmp	.+40     	; 0xf34 <getPassword+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f0c:	6f 81       	ldd	r22, Y+7	; 0x07
     f0e:	78 85       	ldd	r23, Y+8	; 0x08
     f10:	89 85       	ldd	r24, Y+9	; 0x09
     f12:	9a 85       	ldd	r25, Y+10	; 0x0a
     f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	9e 83       	std	Y+6, r25	; 0x06
     f1e:	8d 83       	std	Y+5, r24	; 0x05
     f20:	8d 81       	ldd	r24, Y+5	; 0x05
     f22:	9e 81       	ldd	r25, Y+6	; 0x06
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <getPassword+0x126>
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01
 *******************************************************************************/

void getPassword(uint8 * arrayName){
	LCD_goToRowColumn(1, 0);
	uint8 key;
	for(int i=0;i<PASSWORD_LENGTH;i++){
     f34:	8f 85       	ldd	r24, Y+15	; 0x0f
     f36:	98 89       	ldd	r25, Y+16	; 0x10
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	98 8b       	std	Y+16, r25	; 0x10
     f3c:	8f 87       	std	Y+15, r24	; 0x0f
     f3e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f40:	98 89       	ldd	r25, Y+16	; 0x10
     f42:	84 30       	cpi	r24, 0x04	; 4
     f44:	91 05       	cpc	r25, r1
     f46:	0c f4       	brge	.+2      	; 0xf4a <getPassword+0x144>
     f48:	71 cf       	rjmp	.-286    	; 0xe2c <getPassword+0x26>
			LCD_displayCharacter('*');
			*(arrayName + i) = key;
		}
		_delay_ms(KEYPAD_INPUT_DELAY);
}
}
     f4a:	63 96       	adiw	r28, 0x13	; 19
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	f8 94       	cli
     f50:	de bf       	out	0x3e, r29	; 62
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	cd bf       	out	0x3d, r28	; 61
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <DisplayOptions>:

void DisplayOptions(){
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     f64:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+: open door");
     f68:	2e e7       	ldi	r18, 0x7E	; 126
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	a9 01       	movw	r20, r18
     f72:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "-: change password");
     f76:	2b e8       	ldi	r18, 0x8B	; 139
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	a9 01       	movw	r20, r18
     f80:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <LCD_displayStringRowColumn>
}
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <initializePassword>:

void initializePassword(){
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	2e 97       	sbiw	r28, 0x0e	; 14
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	ba c0       	rjmp	.+372    	; 0x1114 <initializePassword+0x18a>
	while(flag == PASSWORD_MISMATCHED){
		LCD_clearScreen();
     fa0:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_clearScreen>
		LCD_displayString("Enter New Pass");
     fa4:	8e e9       	ldi	r24, 0x9E	; 158
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LCD_displayString>
		LCD_goToRowColumn(1, 0);
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <LCD_goToRowColumn>
		getPassword(password);
     fb4:	8f ee       	ldi	r24, 0xEF	; 239
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 03 07 	call	0xe06	; 0xe06 <getPassword>
		UART_sendByte(WAIT1);
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	0e 94 1a 10 	call	0x2034	; 0x2034 <UART_sendByte>
		while (UART_recieveByte() != WAIT2);
     fc2:	0e 94 31 10 	call	0x2062	; 0x2062 <UART_recieveByte>
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	e1 f7       	brne	.-8      	; 0xfc2 <initializePassword+0x38>
		sendPassword(password);
     fca:	8f ee       	ldi	r24, 0xEF	; 239
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 a3 09 	call	0x1346	; 0x1346 <sendPassword>


		LCD_clearScreen();
     fd2:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Re-enter Pass");
     fd6:	2d ea       	ldi	r18, 0xAD	; 173
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	a9 01       	movw	r20, r18
     fe0:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <LCD_displayStringRowColumn>
		LCD_goToRowColumn(1, 0);
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <LCD_goToRowColumn>
		getPassword(password);
     fec:	8f ee       	ldi	r24, 0xEF	; 239
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 03 07 	call	0xe06	; 0xe06 <getPassword>
		UART_sendByte(WAIT1);
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	0e 94 1a 10 	call	0x2034	; 0x2034 <UART_sendByte>
		while (UART_recieveByte() != WAIT2);
     ffa:	0e 94 31 10 	call	0x2062	; 0x2062 <UART_recieveByte>
     ffe:	82 30       	cpi	r24, 0x02	; 2
    1000:	e1 f7       	brne	.-8      	; 0xffa <initializePassword+0x70>
		sendPassword(password);
    1002:	8f ee       	ldi	r24, 0xEF	; 239
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 a3 09 	call	0x1346	; 0x1346 <sendPassword>


		while (UART_recieveByte() != WAIT1);
    100a:	0e 94 31 10 	call	0x2062	; 0x2062 <UART_recieveByte>
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	e1 f7       	brne	.-8      	; 0x100a <initializePassword+0x80>
		flag = UART_recieveByte();
    1012:	0e 94 31 10 	call	0x2062	; 0x2062 <UART_recieveByte>
    1016:	80 93 ee 00 	sts	0x00EE, r24

		if (flag == PASSWORD_MISMATCHED){
    101a:	80 91 ee 00 	lds	r24, 0x00EE
    101e:	88 23       	and	r24, r24
    1020:	09 f0       	breq	.+2      	; 0x1024 <initializePassword+0x9a>
    1022:	78 c0       	rjmp	.+240    	; 0x1114 <initializePassword+0x18a>
			LCD_clearScreen();
    1024:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_clearScreen>
			LCD_displayString("Mismatch!!");
    1028:	8b eb       	ldi	r24, 0xBB	; 187
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LCD_displayString>
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	aa e7       	ldi	r26, 0x7A	; 122
    1036:	b4 e4       	ldi	r27, 0x44	; 68
    1038:	8b 87       	std	Y+11, r24	; 0x0b
    103a:	9c 87       	std	Y+12, r25	; 0x0c
    103c:	ad 87       	std	Y+13, r26	; 0x0d
    103e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1040:	6b 85       	ldd	r22, Y+11	; 0x0b
    1042:	7c 85       	ldd	r23, Y+12	; 0x0c
    1044:	8d 85       	ldd	r24, Y+13	; 0x0d
    1046:	9e 85       	ldd	r25, Y+14	; 0x0e
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	4a e7       	ldi	r20, 0x7A	; 122
    104e:	53 e4       	ldi	r21, 0x43	; 67
    1050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	8f 83       	std	Y+7, r24	; 0x07
    105a:	98 87       	std	Y+8, r25	; 0x08
    105c:	a9 87       	std	Y+9, r26	; 0x09
    105e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1060:	6f 81       	ldd	r22, Y+7	; 0x07
    1062:	78 85       	ldd	r23, Y+8	; 0x08
    1064:	89 85       	ldd	r24, Y+9	; 0x09
    1066:	9a 85       	ldd	r25, Y+10	; 0x0a
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e8       	ldi	r20, 0x80	; 128
    106e:	5f e3       	ldi	r21, 0x3F	; 63
    1070:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1074:	88 23       	and	r24, r24
    1076:	2c f4       	brge	.+10     	; 0x1082 <initializePassword+0xf8>
		__ticks = 1;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9e 83       	std	Y+6, r25	; 0x06
    107e:	8d 83       	std	Y+5, r24	; 0x05
    1080:	3f c0       	rjmp	.+126    	; 0x1100 <initializePassword+0x176>
	else if (__tmp > 65535)
    1082:	6f 81       	ldd	r22, Y+7	; 0x07
    1084:	78 85       	ldd	r23, Y+8	; 0x08
    1086:	89 85       	ldd	r24, Y+9	; 0x09
    1088:	9a 85       	ldd	r25, Y+10	; 0x0a
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	3f ef       	ldi	r19, 0xFF	; 255
    108e:	4f e7       	ldi	r20, 0x7F	; 127
    1090:	57 e4       	ldi	r21, 0x47	; 71
    1092:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1096:	18 16       	cp	r1, r24
    1098:	4c f5       	brge	.+82     	; 0x10ec <initializePassword+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109a:	6b 85       	ldd	r22, Y+11	; 0x0b
    109c:	7c 85       	ldd	r23, Y+12	; 0x0c
    109e:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e2       	ldi	r20, 0x20	; 32
    10a8:	51 e4       	ldi	r21, 0x41	; 65
    10aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	bc 01       	movw	r22, r24
    10b4:	cd 01       	movw	r24, r26
    10b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	9e 83       	std	Y+6, r25	; 0x06
    10c0:	8d 83       	std	Y+5, r24	; 0x05
    10c2:	0f c0       	rjmp	.+30     	; 0x10e2 <initializePassword+0x158>
    10c4:	89 e1       	ldi	r24, 0x19	; 25
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	9c 83       	std	Y+4, r25	; 0x04
    10ca:	8b 83       	std	Y+3, r24	; 0x03
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	9c 81       	ldd	r25, Y+4	; 0x04
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <initializePassword+0x146>
    10d4:	9c 83       	std	Y+4, r25	; 0x04
    10d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d8:	8d 81       	ldd	r24, Y+5	; 0x05
    10da:	9e 81       	ldd	r25, Y+6	; 0x06
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	9e 83       	std	Y+6, r25	; 0x06
    10e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	9e 81       	ldd	r25, Y+6	; 0x06
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	69 f7       	brne	.-38     	; 0x10c4 <initializePassword+0x13a>
    10ea:	14 c0       	rjmp	.+40     	; 0x1114 <initializePassword+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ec:	6f 81       	ldd	r22, Y+7	; 0x07
    10ee:	78 85       	ldd	r23, Y+8	; 0x08
    10f0:	89 85       	ldd	r24, Y+9	; 0x09
    10f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	9e 83       	std	Y+6, r25	; 0x06
    10fe:	8d 83       	std	Y+5, r24	; 0x05
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	9a 83       	std	Y+2, r25	; 0x02
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	9a 81       	ldd	r25, Y+2	; 0x02
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <initializePassword+0x182>
    1110:	9a 83       	std	Y+2, r25	; 0x02
    1112:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayStringRowColumn(0, 0, "+: open door");
	LCD_displayStringRowColumn(1, 0, "-: change password");
}

void initializePassword(){
	while(flag == PASSWORD_MISMATCHED){
    1114:	80 91 ee 00 	lds	r24, 0x00EE
    1118:	88 23       	and	r24, r24
    111a:	09 f4       	brne	.+2      	; 0x111e <initializePassword+0x194>
    111c:	41 cf       	rjmp	.-382    	; 0xfa0 <initializePassword+0x16>
			LCD_clearScreen();
			LCD_displayString("Mismatch!!");
			_delay_ms(DISPLAY_MESSAGE_DELAY);
		}
	}
	flag = PASSWORD_MISMATCHED;
    111e:	10 92 ee 00 	sts	0x00EE, r1
}
    1122:	2e 96       	adiw	r28, 0x0e	; 14
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <DoorOpeningTask>:

void DoorOpeningTask(){
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	6c 97       	sbiw	r28, 0x1c	; 28
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61

	LCD_clearScreen();
    1148:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is Opening");
    114c:	26 ec       	ldi	r18, 0xC6	; 198
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	a9 01       	movw	r20, r18
    1156:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <LCD_displayStringRowColumn>
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e4       	ldi	r25, 0x40	; 64
    115e:	ac e9       	ldi	r26, 0x9C	; 156
    1160:	b5 e4       	ldi	r27, 0x45	; 69
    1162:	89 8f       	std	Y+25, r24	; 0x19
    1164:	9a 8f       	std	Y+26, r25	; 0x1a
    1166:	ab 8f       	std	Y+27, r26	; 0x1b
    1168:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    116a:	69 8d       	ldd	r22, Y+25	; 0x19
    116c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    116e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1170:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	4a e7       	ldi	r20, 0x7A	; 122
    1178:	53 e4       	ldi	r21, 0x43	; 67
    117a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	8d 8b       	std	Y+21, r24	; 0x15
    1184:	9e 8b       	std	Y+22, r25	; 0x16
    1186:	af 8b       	std	Y+23, r26	; 0x17
    1188:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    118a:	6d 89       	ldd	r22, Y+21	; 0x15
    118c:	7e 89       	ldd	r23, Y+22	; 0x16
    118e:	8f 89       	ldd	r24, Y+23	; 0x17
    1190:	98 8d       	ldd	r25, Y+24	; 0x18
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	40 e8       	ldi	r20, 0x80	; 128
    1198:	5f e3       	ldi	r21, 0x3F	; 63
    119a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    119e:	88 23       	and	r24, r24
    11a0:	2c f4       	brge	.+10     	; 0x11ac <DoorOpeningTask+0x78>
		__ticks = 1;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	9c 8b       	std	Y+20, r25	; 0x14
    11a8:	8b 8b       	std	Y+19, r24	; 0x13
    11aa:	3f c0       	rjmp	.+126    	; 0x122a <DoorOpeningTask+0xf6>
	else if (__tmp > 65535)
    11ac:	6d 89       	ldd	r22, Y+21	; 0x15
    11ae:	7e 89       	ldd	r23, Y+22	; 0x16
    11b0:	8f 89       	ldd	r24, Y+23	; 0x17
    11b2:	98 8d       	ldd	r25, Y+24	; 0x18
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	3f ef       	ldi	r19, 0xFF	; 255
    11b8:	4f e7       	ldi	r20, 0x7F	; 127
    11ba:	57 e4       	ldi	r21, 0x47	; 71
    11bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11c0:	18 16       	cp	r1, r24
    11c2:	4c f5       	brge	.+82     	; 0x1216 <DoorOpeningTask+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c4:	69 8d       	ldd	r22, Y+25	; 0x19
    11c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e2       	ldi	r20, 0x20	; 32
    11d2:	51 e4       	ldi	r21, 0x41	; 65
    11d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	bc 01       	movw	r22, r24
    11de:	cd 01       	movw	r24, r26
    11e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	9c 8b       	std	Y+20, r25	; 0x14
    11ea:	8b 8b       	std	Y+19, r24	; 0x13
    11ec:	0f c0       	rjmp	.+30     	; 0x120c <DoorOpeningTask+0xd8>
    11ee:	89 e1       	ldi	r24, 0x19	; 25
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	9a 8b       	std	Y+18, r25	; 0x12
    11f4:	89 8b       	std	Y+17, r24	; 0x11
    11f6:	89 89       	ldd	r24, Y+17	; 0x11
    11f8:	9a 89       	ldd	r25, Y+18	; 0x12
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	f1 f7       	brne	.-4      	; 0x11fa <DoorOpeningTask+0xc6>
    11fe:	9a 8b       	std	Y+18, r25	; 0x12
    1200:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1202:	8b 89       	ldd	r24, Y+19	; 0x13
    1204:	9c 89       	ldd	r25, Y+20	; 0x14
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	9c 8b       	std	Y+20, r25	; 0x14
    120a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    120c:	8b 89       	ldd	r24, Y+19	; 0x13
    120e:	9c 89       	ldd	r25, Y+20	; 0x14
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	69 f7       	brne	.-38     	; 0x11ee <DoorOpeningTask+0xba>
    1214:	14 c0       	rjmp	.+40     	; 0x123e <DoorOpeningTask+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1216:	6d 89       	ldd	r22, Y+21	; 0x15
    1218:	7e 89       	ldd	r23, Y+22	; 0x16
    121a:	8f 89       	ldd	r24, Y+23	; 0x17
    121c:	98 8d       	ldd	r25, Y+24	; 0x18
    121e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	9c 8b       	std	Y+20, r25	; 0x14
    1228:	8b 8b       	std	Y+19, r24	; 0x13
    122a:	8b 89       	ldd	r24, Y+19	; 0x13
    122c:	9c 89       	ldd	r25, Y+20	; 0x14
    122e:	98 8b       	std	Y+16, r25	; 0x10
    1230:	8f 87       	std	Y+15, r24	; 0x0f
    1232:	8f 85       	ldd	r24, Y+15	; 0x0f
    1234:	98 89       	ldd	r25, Y+16	; 0x10
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	f1 f7       	brne	.-4      	; 0x1236 <DoorOpeningTask+0x102>
    123a:	98 8b       	std	Y+16, r25	; 0x10
    123c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5000);

	LCD_clearScreen();
    123e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is Closing");
    1242:	26 ed       	ldi	r18, 0xD6	; 214
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	a9 01       	movw	r20, r18
    124c:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <LCD_displayStringRowColumn>
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	90 e4       	ldi	r25, 0x40	; 64
    1254:	ac e9       	ldi	r26, 0x9C	; 156
    1256:	b5 e4       	ldi	r27, 0x45	; 69
    1258:	8b 87       	std	Y+11, r24	; 0x0b
    125a:	9c 87       	std	Y+12, r25	; 0x0c
    125c:	ad 87       	std	Y+13, r26	; 0x0d
    125e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1260:	6b 85       	ldd	r22, Y+11	; 0x0b
    1262:	7c 85       	ldd	r23, Y+12	; 0x0c
    1264:	8d 85       	ldd	r24, Y+13	; 0x0d
    1266:	9e 85       	ldd	r25, Y+14	; 0x0e
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	4a e7       	ldi	r20, 0x7A	; 122
    126e:	53 e4       	ldi	r21, 0x43	; 67
    1270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	8f 83       	std	Y+7, r24	; 0x07
    127a:	98 87       	std	Y+8, r25	; 0x08
    127c:	a9 87       	std	Y+9, r26	; 0x09
    127e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1280:	6f 81       	ldd	r22, Y+7	; 0x07
    1282:	78 85       	ldd	r23, Y+8	; 0x08
    1284:	89 85       	ldd	r24, Y+9	; 0x09
    1286:	9a 85       	ldd	r25, Y+10	; 0x0a
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e8       	ldi	r20, 0x80	; 128
    128e:	5f e3       	ldi	r21, 0x3F	; 63
    1290:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1294:	88 23       	and	r24, r24
    1296:	2c f4       	brge	.+10     	; 0x12a2 <DoorOpeningTask+0x16e>
		__ticks = 1;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	9e 83       	std	Y+6, r25	; 0x06
    129e:	8d 83       	std	Y+5, r24	; 0x05
    12a0:	3f c0       	rjmp	.+126    	; 0x1320 <DoorOpeningTask+0x1ec>
	else if (__tmp > 65535)
    12a2:	6f 81       	ldd	r22, Y+7	; 0x07
    12a4:	78 85       	ldd	r23, Y+8	; 0x08
    12a6:	89 85       	ldd	r24, Y+9	; 0x09
    12a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	3f ef       	ldi	r19, 0xFF	; 255
    12ae:	4f e7       	ldi	r20, 0x7F	; 127
    12b0:	57 e4       	ldi	r21, 0x47	; 71
    12b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b6:	18 16       	cp	r1, r24
    12b8:	4c f5       	brge	.+82     	; 0x130c <DoorOpeningTask+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    12bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    12be:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e2       	ldi	r20, 0x20	; 32
    12c8:	51 e4       	ldi	r21, 0x41	; 65
    12ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	bc 01       	movw	r22, r24
    12d4:	cd 01       	movw	r24, r26
    12d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	9e 83       	std	Y+6, r25	; 0x06
    12e0:	8d 83       	std	Y+5, r24	; 0x05
    12e2:	0f c0       	rjmp	.+30     	; 0x1302 <DoorOpeningTask+0x1ce>
    12e4:	89 e1       	ldi	r24, 0x19	; 25
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	9c 83       	std	Y+4, r25	; 0x04
    12ea:	8b 83       	std	Y+3, r24	; 0x03
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <DoorOpeningTask+0x1bc>
    12f4:	9c 83       	std	Y+4, r25	; 0x04
    12f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f8:	8d 81       	ldd	r24, Y+5	; 0x05
    12fa:	9e 81       	ldd	r25, Y+6	; 0x06
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	9e 83       	std	Y+6, r25	; 0x06
    1300:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1302:	8d 81       	ldd	r24, Y+5	; 0x05
    1304:	9e 81       	ldd	r25, Y+6	; 0x06
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	69 f7       	brne	.-38     	; 0x12e4 <DoorOpeningTask+0x1b0>
    130a:	14 c0       	rjmp	.+40     	; 0x1334 <DoorOpeningTask+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130c:	6f 81       	ldd	r22, Y+7	; 0x07
    130e:	78 85       	ldd	r23, Y+8	; 0x08
    1310:	89 85       	ldd	r24, Y+9	; 0x09
    1312:	9a 85       	ldd	r25, Y+10	; 0x0a
    1314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	9e 83       	std	Y+6, r25	; 0x06
    131e:	8d 83       	std	Y+5, r24	; 0x05
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	9a 83       	std	Y+2, r25	; 0x02
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	f1 f7       	brne	.-4      	; 0x132c <DoorOpeningTask+0x1f8>
    1330:	9a 83       	std	Y+2, r25	; 0x02
    1332:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5000);

}
    1334:	6c 96       	adiw	r28, 0x1c	; 28
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <sendPassword>:

void sendPassword(uint8 * passwordArray){
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	61 97       	sbiw	r28, 0x11	; 17
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	99 8b       	std	Y+17, r25	; 0x11
    135c:	88 8b       	std	Y+16, r24	; 0x10
	uint8 cnt;
	for (cnt=0;cnt<PASSWORD_LENGTH;cnt++){
    135e:	1f 86       	std	Y+15, r1	; 0x0f
    1360:	80 c0       	rjmp	.+256    	; 0x1462 <sendPassword+0x11c>
		UART_sendByte(passwordArray[cnt]);
    1362:	8f 85       	ldd	r24, Y+15	; 0x0f
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	88 89       	ldd	r24, Y+16	; 0x10
    136a:	99 89       	ldd	r25, Y+17	; 0x11
    136c:	fc 01       	movw	r30, r24
    136e:	e2 0f       	add	r30, r18
    1370:	f3 1f       	adc	r31, r19
    1372:	80 81       	ld	r24, Z
    1374:	0e 94 1a 10 	call	0x2034	; 0x2034 <UART_sendByte>
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a8 ec       	ldi	r26, 0xC8	; 200
    137e:	b2 e4       	ldi	r27, 0x42	; 66
    1380:	8b 87       	std	Y+11, r24	; 0x0b
    1382:	9c 87       	std	Y+12, r25	; 0x0c
    1384:	ad 87       	std	Y+13, r26	; 0x0d
    1386:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1388:	6b 85       	ldd	r22, Y+11	; 0x0b
    138a:	7c 85       	ldd	r23, Y+12	; 0x0c
    138c:	8d 85       	ldd	r24, Y+13	; 0x0d
    138e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	4a e7       	ldi	r20, 0x7A	; 122
    1396:	53 e4       	ldi	r21, 0x43	; 67
    1398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	8f 83       	std	Y+7, r24	; 0x07
    13a2:	98 87       	std	Y+8, r25	; 0x08
    13a4:	a9 87       	std	Y+9, r26	; 0x09
    13a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13a8:	6f 81       	ldd	r22, Y+7	; 0x07
    13aa:	78 85       	ldd	r23, Y+8	; 0x08
    13ac:	89 85       	ldd	r24, Y+9	; 0x09
    13ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	40 e8       	ldi	r20, 0x80	; 128
    13b6:	5f e3       	ldi	r21, 0x3F	; 63
    13b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13bc:	88 23       	and	r24, r24
    13be:	2c f4       	brge	.+10     	; 0x13ca <sendPassword+0x84>
		__ticks = 1;
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	9e 83       	std	Y+6, r25	; 0x06
    13c6:	8d 83       	std	Y+5, r24	; 0x05
    13c8:	3f c0       	rjmp	.+126    	; 0x1448 <sendPassword+0x102>
	else if (__tmp > 65535)
    13ca:	6f 81       	ldd	r22, Y+7	; 0x07
    13cc:	78 85       	ldd	r23, Y+8	; 0x08
    13ce:	89 85       	ldd	r24, Y+9	; 0x09
    13d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	3f ef       	ldi	r19, 0xFF	; 255
    13d6:	4f e7       	ldi	r20, 0x7F	; 127
    13d8:	57 e4       	ldi	r21, 0x47	; 71
    13da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13de:	18 16       	cp	r1, r24
    13e0:	4c f5       	brge	.+82     	; 0x1434 <sendPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	40 e2       	ldi	r20, 0x20	; 32
    13f0:	51 e4       	ldi	r21, 0x41	; 65
    13f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	bc 01       	movw	r22, r24
    13fc:	cd 01       	movw	r24, r26
    13fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	9e 83       	std	Y+6, r25	; 0x06
    1408:	8d 83       	std	Y+5, r24	; 0x05
    140a:	0f c0       	rjmp	.+30     	; 0x142a <sendPassword+0xe4>
    140c:	89 e1       	ldi	r24, 0x19	; 25
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	9c 83       	std	Y+4, r25	; 0x04
    1412:	8b 83       	std	Y+3, r24	; 0x03
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	9c 81       	ldd	r25, Y+4	; 0x04
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <sendPassword+0xd2>
    141c:	9c 83       	std	Y+4, r25	; 0x04
    141e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	9e 81       	ldd	r25, Y+6	; 0x06
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	9e 83       	std	Y+6, r25	; 0x06
    1428:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
    142c:	9e 81       	ldd	r25, Y+6	; 0x06
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	69 f7       	brne	.-38     	; 0x140c <sendPassword+0xc6>
    1432:	14 c0       	rjmp	.+40     	; 0x145c <sendPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1434:	6f 81       	ldd	r22, Y+7	; 0x07
    1436:	78 85       	ldd	r23, Y+8	; 0x08
    1438:	89 85       	ldd	r24, Y+9	; 0x09
    143a:	9a 85       	ldd	r25, Y+10	; 0x0a
    143c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	9e 83       	std	Y+6, r25	; 0x06
    1446:	8d 83       	std	Y+5, r24	; 0x05
    1448:	8d 81       	ldd	r24, Y+5	; 0x05
    144a:	9e 81       	ldd	r25, Y+6	; 0x06
    144c:	9a 83       	std	Y+2, r25	; 0x02
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	9a 81       	ldd	r25, Y+2	; 0x02
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	f1 f7       	brne	.-4      	; 0x1454 <sendPassword+0x10e>
    1458:	9a 83       	std	Y+2, r25	; 0x02
    145a:	89 83       	std	Y+1, r24	; 0x01

}

void sendPassword(uint8 * passwordArray){
	uint8 cnt;
	for (cnt=0;cnt<PASSWORD_LENGTH;cnt++){
    145c:	8f 85       	ldd	r24, Y+15	; 0x0f
    145e:	8f 5f       	subi	r24, 0xFF	; 255
    1460:	8f 87       	std	Y+15, r24	; 0x0f
    1462:	8f 85       	ldd	r24, Y+15	; 0x0f
    1464:	84 30       	cpi	r24, 0x04	; 4
    1466:	08 f4       	brcc	.+2      	; 0x146a <sendPassword+0x124>
    1468:	7c cf       	rjmp	.-264    	; 0x1362 <sendPassword+0x1c>
		UART_sendByte(passwordArray[cnt]);
		_delay_ms(100);
	}
}
    146a:	61 96       	adiw	r28, 0x11	; 17
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	00 d0       	rcall	.+0      	; 0x1482 <KeyPad_getPressedKey+0x6>
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1486:	1a 82       	std	Y+2, r1	; 0x02
    1488:	4c c0       	rjmp	.+152    	; 0x1522 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    148a:	e7 e3       	ldi	r30, 0x37	; 55
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	80 e1       	ldi	r24, 0x10	; 16
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 c0       	rjmp	.+4      	; 0x149e <KeyPad_getPressedKey+0x22>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	2a 95       	dec	r18
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <KeyPad_getPressedKey+0x1e>
    14a2:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    14a4:	e8 e3       	ldi	r30, 0x38	; 56
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	80 e1       	ldi	r24, 0x10	; 16
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 2e       	mov	r0, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <KeyPad_getPressedKey+0x3e>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	0a 94       	dec	r0
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <KeyPad_getPressedKey+0x3a>
    14be:	80 95       	com	r24
    14c0:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    14c2:	19 82       	std	Y+1, r1	; 0x01
    14c4:	28 c0       	rjmp	.+80     	; 0x1516 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    14c6:	e6 e3       	ldi	r30, 0x36	; 54
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	a9 01       	movw	r20, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <KeyPad_getPressedKey+0x62>
    14da:	55 95       	asr	r21
    14dc:	47 95       	ror	r20
    14de:	8a 95       	dec	r24
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <KeyPad_getPressedKey+0x5e>
    14e2:	ca 01       	movw	r24, r20
    14e4:	81 70       	andi	r24, 0x01	; 1
    14e6:	90 70       	andi	r25, 0x00	; 0
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	91 f4       	brne	.+36     	; 0x1510 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	98 2f       	mov	r25, r24
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	89 0f       	add	r24, r25
    1500:	8f 5f       	subi	r24, 0xFF	; 255
    1502:	0e 94 96 0a 	call	0x152c	; 0x152c <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	8f 5f       	subi	r24, 0xFF	; 255
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	84 30       	cpi	r24, 0x04	; 4
    151a:	a8 f2       	brcs	.-86     	; 0x14c6 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	8f 5f       	subi	r24, 0xFF	; 255
    1520:	8a 83       	std	Y+2, r24	; 0x02
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	84 30       	cpi	r24, 0x04	; 4
    1526:	08 f4       	brcc	.+2      	; 0x152a <KeyPad_getPressedKey+0xae>
    1528:	b0 cf       	rjmp	.-160    	; 0x148a <KeyPad_getPressedKey+0xe>
    152a:	ad cf       	rjmp	.-166    	; 0x1486 <KeyPad_getPressedKey+0xa>

0000152c <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	00 d0       	rcall	.+0      	; 0x1532 <KeyPad_4x4_adjustKeyNumber+0x6>
    1532:	00 d0       	rcall	.+0      	; 0x1534 <KeyPad_4x4_adjustKeyNumber+0x8>
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	3c 83       	std	Y+4, r19	; 0x04
    1542:	2b 83       	std	Y+3, r18	; 0x03
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	88 30       	cpi	r24, 0x08	; 8
    154a:	91 05       	cpc	r25, r1
    154c:	09 f4       	brne	.+2      	; 0x1550 <KeyPad_4x4_adjustKeyNumber+0x24>
    154e:	70 c0       	rjmp	.+224    	; 0x1630 <KeyPad_4x4_adjustKeyNumber+0x104>
    1550:	2b 81       	ldd	r18, Y+3	; 0x03
    1552:	3c 81       	ldd	r19, Y+4	; 0x04
    1554:	29 30       	cpi	r18, 0x09	; 9
    1556:	31 05       	cpc	r19, r1
    1558:	5c f5       	brge	.+86     	; 0x15b0 <KeyPad_4x4_adjustKeyNumber+0x84>
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	9c 81       	ldd	r25, Y+4	; 0x04
    155e:	84 30       	cpi	r24, 0x04	; 4
    1560:	91 05       	cpc	r25, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <KeyPad_4x4_adjustKeyNumber+0x3a>
    1564:	59 c0       	rjmp	.+178    	; 0x1618 <KeyPad_4x4_adjustKeyNumber+0xec>
    1566:	2b 81       	ldd	r18, Y+3	; 0x03
    1568:	3c 81       	ldd	r19, Y+4	; 0x04
    156a:	25 30       	cpi	r18, 0x05	; 5
    156c:	31 05       	cpc	r19, r1
    156e:	9c f4       	brge	.+38     	; 0x1596 <KeyPad_4x4_adjustKeyNumber+0x6a>
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	82 30       	cpi	r24, 0x02	; 2
    1576:	91 05       	cpc	r25, r1
    1578:	09 f4       	brne	.+2      	; 0x157c <KeyPad_4x4_adjustKeyNumber+0x50>
    157a:	48 c0       	rjmp	.+144    	; 0x160c <KeyPad_4x4_adjustKeyNumber+0xe0>
    157c:	2b 81       	ldd	r18, Y+3	; 0x03
    157e:	3c 81       	ldd	r19, Y+4	; 0x04
    1580:	23 30       	cpi	r18, 0x03	; 3
    1582:	31 05       	cpc	r19, r1
    1584:	0c f0       	brlt	.+2      	; 0x1588 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1586:	45 c0       	rjmp	.+138    	; 0x1612 <KeyPad_4x4_adjustKeyNumber+0xe6>
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	91 05       	cpc	r25, r1
    1590:	09 f4       	brne	.+2      	; 0x1594 <KeyPad_4x4_adjustKeyNumber+0x68>
    1592:	39 c0       	rjmp	.+114    	; 0x1606 <KeyPad_4x4_adjustKeyNumber+0xda>
    1594:	67 c0       	rjmp	.+206    	; 0x1664 <KeyPad_4x4_adjustKeyNumber+0x138>
    1596:	2b 81       	ldd	r18, Y+3	; 0x03
    1598:	3c 81       	ldd	r19, Y+4	; 0x04
    159a:	26 30       	cpi	r18, 0x06	; 6
    159c:	31 05       	cpc	r19, r1
    159e:	09 f4       	brne	.+2      	; 0x15a2 <KeyPad_4x4_adjustKeyNumber+0x76>
    15a0:	41 c0       	rjmp	.+130    	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0xf8>
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	87 30       	cpi	r24, 0x07	; 7
    15a8:	91 05       	cpc	r25, r1
    15aa:	0c f0       	brlt	.+2      	; 0x15ae <KeyPad_4x4_adjustKeyNumber+0x82>
    15ac:	3e c0       	rjmp	.+124    	; 0x162a <KeyPad_4x4_adjustKeyNumber+0xfe>
    15ae:	37 c0       	rjmp	.+110    	; 0x161e <KeyPad_4x4_adjustKeyNumber+0xf2>
    15b0:	2b 81       	ldd	r18, Y+3	; 0x03
    15b2:	3c 81       	ldd	r19, Y+4	; 0x04
    15b4:	2c 30       	cpi	r18, 0x0C	; 12
    15b6:	31 05       	cpc	r19, r1
    15b8:	09 f4       	brne	.+2      	; 0x15bc <KeyPad_4x4_adjustKeyNumber+0x90>
    15ba:	46 c0       	rjmp	.+140    	; 0x1648 <KeyPad_4x4_adjustKeyNumber+0x11c>
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	9c 81       	ldd	r25, Y+4	; 0x04
    15c0:	8d 30       	cpi	r24, 0x0D	; 13
    15c2:	91 05       	cpc	r25, r1
    15c4:	5c f4       	brge	.+22     	; 0x15dc <KeyPad_4x4_adjustKeyNumber+0xb0>
    15c6:	2b 81       	ldd	r18, Y+3	; 0x03
    15c8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ca:	2a 30       	cpi	r18, 0x0A	; 10
    15cc:	31 05       	cpc	r19, r1
    15ce:	b1 f1       	breq	.+108    	; 0x163c <KeyPad_4x4_adjustKeyNumber+0x110>
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	8b 30       	cpi	r24, 0x0B	; 11
    15d6:	91 05       	cpc	r25, r1
    15d8:	a4 f5       	brge	.+104    	; 0x1642 <KeyPad_4x4_adjustKeyNumber+0x116>
    15da:	2d c0       	rjmp	.+90     	; 0x1636 <KeyPad_4x4_adjustKeyNumber+0x10a>
    15dc:	2b 81       	ldd	r18, Y+3	; 0x03
    15de:	3c 81       	ldd	r19, Y+4	; 0x04
    15e0:	2e 30       	cpi	r18, 0x0E	; 14
    15e2:	31 05       	cpc	r19, r1
    15e4:	b9 f1       	breq	.+110    	; 0x1654 <KeyPad_4x4_adjustKeyNumber+0x128>
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	8e 30       	cpi	r24, 0x0E	; 14
    15ec:	91 05       	cpc	r25, r1
    15ee:	7c f1       	brlt	.+94     	; 0x164e <KeyPad_4x4_adjustKeyNumber+0x122>
    15f0:	2b 81       	ldd	r18, Y+3	; 0x03
    15f2:	3c 81       	ldd	r19, Y+4	; 0x04
    15f4:	2f 30       	cpi	r18, 0x0F	; 15
    15f6:	31 05       	cpc	r19, r1
    15f8:	79 f1       	breq	.+94     	; 0x1658 <KeyPad_4x4_adjustKeyNumber+0x12c>
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	80 31       	cpi	r24, 0x10	; 16
    1600:	91 05       	cpc	r25, r1
    1602:	69 f1       	breq	.+90     	; 0x165e <KeyPad_4x4_adjustKeyNumber+0x132>
    1604:	2f c0       	rjmp	.+94     	; 0x1664 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1606:	97 e0       	ldi	r25, 0x07	; 7
    1608:	9a 83       	std	Y+2, r25	; 0x02
    160a:	2e c0       	rjmp	.+92     	; 0x1668 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    160c:	28 e0       	ldi	r18, 0x08	; 8
    160e:	2a 83       	std	Y+2, r18	; 0x02
    1610:	2b c0       	rjmp	.+86     	; 0x1668 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    1612:	39 e0       	ldi	r19, 0x09	; 9
    1614:	3a 83       	std	Y+2, r19	; 0x02
    1616:	28 c0       	rjmp	.+80     	; 0x1668 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    1618:	85 e2       	ldi	r24, 0x25	; 37
    161a:	8a 83       	std	Y+2, r24	; 0x02
    161c:	25 c0       	rjmp	.+74     	; 0x1668 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    161e:	94 e0       	ldi	r25, 0x04	; 4
    1620:	9a 83       	std	Y+2, r25	; 0x02
    1622:	22 c0       	rjmp	.+68     	; 0x1668 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1624:	25 e0       	ldi	r18, 0x05	; 5
    1626:	2a 83       	std	Y+2, r18	; 0x02
    1628:	1f c0       	rjmp	.+62     	; 0x1668 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    162a:	36 e0       	ldi	r19, 0x06	; 6
    162c:	3a 83       	std	Y+2, r19	; 0x02
    162e:	1c c0       	rjmp	.+56     	; 0x1668 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1630:	8a e2       	ldi	r24, 0x2A	; 42
    1632:	8a 83       	std	Y+2, r24	; 0x02
    1634:	19 c0       	rjmp	.+50     	; 0x1668 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    1636:	91 e0       	ldi	r25, 0x01	; 1
    1638:	9a 83       	std	Y+2, r25	; 0x02
    163a:	16 c0       	rjmp	.+44     	; 0x1668 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    163c:	22 e0       	ldi	r18, 0x02	; 2
    163e:	2a 83       	std	Y+2, r18	; 0x02
    1640:	13 c0       	rjmp	.+38     	; 0x1668 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    1642:	33 e0       	ldi	r19, 0x03	; 3
    1644:	3a 83       	std	Y+2, r19	; 0x02
    1646:	10 c0       	rjmp	.+32     	; 0x1668 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1648:	8d e2       	ldi	r24, 0x2D	; 45
    164a:	8a 83       	std	Y+2, r24	; 0x02
    164c:	0d c0       	rjmp	.+26     	; 0x1668 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    164e:	9d e0       	ldi	r25, 0x0D	; 13
    1650:	9a 83       	std	Y+2, r25	; 0x02
    1652:	0a c0       	rjmp	.+20     	; 0x1668 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    1654:	1a 82       	std	Y+2, r1	; 0x02
    1656:	08 c0       	rjmp	.+16     	; 0x1668 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1658:	2d e3       	ldi	r18, 0x3D	; 61
    165a:	2a 83       	std	Y+2, r18	; 0x02
    165c:	05 c0       	rjmp	.+10     	; 0x1668 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    165e:	3b e2       	ldi	r19, 0x2B	; 43
    1660:	3a 83       	std	Y+2, r19	; 0x02
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	8a 83       	std	Y+2, r24	; 0x02
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1680:	a4 e3       	ldi	r26, 0x34	; 52
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e4 e3       	ldi	r30, 0x34	; 52
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	87 60       	ori	r24, 0x07	; 7
    168c:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    168e:	ea e3       	ldi	r30, 0x3A	; 58
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	8f ef       	ldi	r24, 0xFF	; 255
    1694:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1696:	88 e3       	ldi	r24, 0x38	; 56
    1698:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    169c:	8c e0       	ldi	r24, 0x0C	; 12
    169e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_sendCommand>
}
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	e9 97       	sbiw	r28, 0x39	; 57
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    16c4:	a5 e3       	ldi	r26, 0x35	; 53
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e5 e3       	ldi	r30, 0x35	; 53
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	8e 7f       	andi	r24, 0xFE	; 254
    16d0:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    16d2:	a5 e3       	ldi	r26, 0x35	; 53
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e5 e3       	ldi	r30, 0x35	; 53
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8d 7f       	andi	r24, 0xFD	; 253
    16de:	8c 93       	st	X, r24
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	a0 e8       	ldi	r26, 0x80	; 128
    16e6:	bf e3       	ldi	r27, 0x3F	; 63
    16e8:	8d ab       	std	Y+53, r24	; 0x35
    16ea:	9e ab       	std	Y+54, r25	; 0x36
    16ec:	af ab       	std	Y+55, r26	; 0x37
    16ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f0:	6d a9       	ldd	r22, Y+53	; 0x35
    16f2:	7e a9       	ldd	r23, Y+54	; 0x36
    16f4:	8f a9       	ldd	r24, Y+55	; 0x37
    16f6:	98 ad       	ldd	r25, Y+56	; 0x38
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	4a e7       	ldi	r20, 0x7A	; 122
    16fe:	53 e4       	ldi	r21, 0x43	; 67
    1700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	89 ab       	std	Y+49, r24	; 0x31
    170a:	9a ab       	std	Y+50, r25	; 0x32
    170c:	ab ab       	std	Y+51, r26	; 0x33
    170e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1710:	69 a9       	ldd	r22, Y+49	; 0x31
    1712:	7a a9       	ldd	r23, Y+50	; 0x32
    1714:	8b a9       	ldd	r24, Y+51	; 0x33
    1716:	9c a9       	ldd	r25, Y+52	; 0x34
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	40 e8       	ldi	r20, 0x80	; 128
    171e:	5f e3       	ldi	r21, 0x3F	; 63
    1720:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1724:	88 23       	and	r24, r24
    1726:	2c f4       	brge	.+10     	; 0x1732 <LCD_sendCommand+0x84>
		__ticks = 1;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	98 ab       	std	Y+48, r25	; 0x30
    172e:	8f a7       	std	Y+47, r24	; 0x2f
    1730:	3f c0       	rjmp	.+126    	; 0x17b0 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1732:	69 a9       	ldd	r22, Y+49	; 0x31
    1734:	7a a9       	ldd	r23, Y+50	; 0x32
    1736:	8b a9       	ldd	r24, Y+51	; 0x33
    1738:	9c a9       	ldd	r25, Y+52	; 0x34
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	3f ef       	ldi	r19, 0xFF	; 255
    173e:	4f e7       	ldi	r20, 0x7F	; 127
    1740:	57 e4       	ldi	r21, 0x47	; 71
    1742:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1746:	18 16       	cp	r1, r24
    1748:	4c f5       	brge	.+82     	; 0x179c <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174a:	6d a9       	ldd	r22, Y+53	; 0x35
    174c:	7e a9       	ldd	r23, Y+54	; 0x36
    174e:	8f a9       	ldd	r24, Y+55	; 0x37
    1750:	98 ad       	ldd	r25, Y+56	; 0x38
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e2       	ldi	r20, 0x20	; 32
    1758:	51 e4       	ldi	r21, 0x41	; 65
    175a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	bc 01       	movw	r22, r24
    1764:	cd 01       	movw	r24, r26
    1766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	98 ab       	std	Y+48, r25	; 0x30
    1770:	8f a7       	std	Y+47, r24	; 0x2f
    1772:	0f c0       	rjmp	.+30     	; 0x1792 <LCD_sendCommand+0xe4>
    1774:	89 e1       	ldi	r24, 0x19	; 25
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9e a7       	std	Y+46, r25	; 0x2e
    177a:	8d a7       	std	Y+45, r24	; 0x2d
    177c:	8d a5       	ldd	r24, Y+45	; 0x2d
    177e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <LCD_sendCommand+0xd2>
    1784:	9e a7       	std	Y+46, r25	; 0x2e
    1786:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1788:	8f a5       	ldd	r24, Y+47	; 0x2f
    178a:	98 a9       	ldd	r25, Y+48	; 0x30
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	98 ab       	std	Y+48, r25	; 0x30
    1790:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1792:	8f a5       	ldd	r24, Y+47	; 0x2f
    1794:	98 a9       	ldd	r25, Y+48	; 0x30
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	69 f7       	brne	.-38     	; 0x1774 <LCD_sendCommand+0xc6>
    179a:	14 c0       	rjmp	.+40     	; 0x17c4 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    179c:	69 a9       	ldd	r22, Y+49	; 0x31
    179e:	7a a9       	ldd	r23, Y+50	; 0x32
    17a0:	8b a9       	ldd	r24, Y+51	; 0x33
    17a2:	9c a9       	ldd	r25, Y+52	; 0x34
    17a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	98 ab       	std	Y+48, r25	; 0x30
    17ae:	8f a7       	std	Y+47, r24	; 0x2f
    17b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17b2:	98 a9       	ldd	r25, Y+48	; 0x30
    17b4:	9c a7       	std	Y+44, r25	; 0x2c
    17b6:	8b a7       	std	Y+43, r24	; 0x2b
    17b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    17ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <LCD_sendCommand+0x10e>
    17c0:	9c a7       	std	Y+44, r25	; 0x2c
    17c2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    17c4:	a5 e3       	ldi	r26, 0x35	; 53
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e5 e3       	ldi	r30, 0x35	; 53
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	84 60       	ori	r24, 0x04	; 4
    17d0:	8c 93       	st	X, r24
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	a0 e8       	ldi	r26, 0x80	; 128
    17d8:	bf e3       	ldi	r27, 0x3F	; 63
    17da:	8f a3       	std	Y+39, r24	; 0x27
    17dc:	98 a7       	std	Y+40, r25	; 0x28
    17de:	a9 a7       	std	Y+41, r26	; 0x29
    17e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e2:	6f a1       	ldd	r22, Y+39	; 0x27
    17e4:	78 a5       	ldd	r23, Y+40	; 0x28
    17e6:	89 a5       	ldd	r24, Y+41	; 0x29
    17e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	4a e7       	ldi	r20, 0x7A	; 122
    17f0:	53 e4       	ldi	r21, 0x43	; 67
    17f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	8b a3       	std	Y+35, r24	; 0x23
    17fc:	9c a3       	std	Y+36, r25	; 0x24
    17fe:	ad a3       	std	Y+37, r26	; 0x25
    1800:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1802:	6b a1       	ldd	r22, Y+35	; 0x23
    1804:	7c a1       	ldd	r23, Y+36	; 0x24
    1806:	8d a1       	ldd	r24, Y+37	; 0x25
    1808:	9e a1       	ldd	r25, Y+38	; 0x26
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e8       	ldi	r20, 0x80	; 128
    1810:	5f e3       	ldi	r21, 0x3F	; 63
    1812:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1816:	88 23       	and	r24, r24
    1818:	2c f4       	brge	.+10     	; 0x1824 <LCD_sendCommand+0x176>
		__ticks = 1;
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	9a a3       	std	Y+34, r25	; 0x22
    1820:	89 a3       	std	Y+33, r24	; 0x21
    1822:	3f c0       	rjmp	.+126    	; 0x18a2 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1824:	6b a1       	ldd	r22, Y+35	; 0x23
    1826:	7c a1       	ldd	r23, Y+36	; 0x24
    1828:	8d a1       	ldd	r24, Y+37	; 0x25
    182a:	9e a1       	ldd	r25, Y+38	; 0x26
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	3f ef       	ldi	r19, 0xFF	; 255
    1830:	4f e7       	ldi	r20, 0x7F	; 127
    1832:	57 e4       	ldi	r21, 0x47	; 71
    1834:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1838:	18 16       	cp	r1, r24
    183a:	4c f5       	brge	.+82     	; 0x188e <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183c:	6f a1       	ldd	r22, Y+39	; 0x27
    183e:	78 a5       	ldd	r23, Y+40	; 0x28
    1840:	89 a5       	ldd	r24, Y+41	; 0x29
    1842:	9a a5       	ldd	r25, Y+42	; 0x2a
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e2       	ldi	r20, 0x20	; 32
    184a:	51 e4       	ldi	r21, 0x41	; 65
    184c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	bc 01       	movw	r22, r24
    1856:	cd 01       	movw	r24, r26
    1858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	9a a3       	std	Y+34, r25	; 0x22
    1862:	89 a3       	std	Y+33, r24	; 0x21
    1864:	0f c0       	rjmp	.+30     	; 0x1884 <LCD_sendCommand+0x1d6>
    1866:	89 e1       	ldi	r24, 0x19	; 25
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	98 a3       	std	Y+32, r25	; 0x20
    186c:	8f 8f       	std	Y+31, r24	; 0x1f
    186e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1870:	98 a1       	ldd	r25, Y+32	; 0x20
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	f1 f7       	brne	.-4      	; 0x1872 <LCD_sendCommand+0x1c4>
    1876:	98 a3       	std	Y+32, r25	; 0x20
    1878:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187a:	89 a1       	ldd	r24, Y+33	; 0x21
    187c:	9a a1       	ldd	r25, Y+34	; 0x22
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	9a a3       	std	Y+34, r25	; 0x22
    1882:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1884:	89 a1       	ldd	r24, Y+33	; 0x21
    1886:	9a a1       	ldd	r25, Y+34	; 0x22
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	69 f7       	brne	.-38     	; 0x1866 <LCD_sendCommand+0x1b8>
    188c:	14 c0       	rjmp	.+40     	; 0x18b6 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188e:	6b a1       	ldd	r22, Y+35	; 0x23
    1890:	7c a1       	ldd	r23, Y+36	; 0x24
    1892:	8d a1       	ldd	r24, Y+37	; 0x25
    1894:	9e a1       	ldd	r25, Y+38	; 0x26
    1896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	9a a3       	std	Y+34, r25	; 0x22
    18a0:	89 a3       	std	Y+33, r24	; 0x21
    18a2:	89 a1       	ldd	r24, Y+33	; 0x21
    18a4:	9a a1       	ldd	r25, Y+34	; 0x22
    18a6:	9e 8f       	std	Y+30, r25	; 0x1e
    18a8:	8d 8f       	std	Y+29, r24	; 0x1d
    18aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <LCD_sendCommand+0x200>
    18b2:	9e 8f       	std	Y+30, r25	; 0x1e
    18b4:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    18b6:	eb e3       	ldi	r30, 0x3B	; 59
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	89 ad       	ldd	r24, Y+57	; 0x39
    18bc:	80 83       	st	Z, r24
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	a0 e8       	ldi	r26, 0x80	; 128
    18c4:	bf e3       	ldi	r27, 0x3F	; 63
    18c6:	89 8f       	std	Y+25, r24	; 0x19
    18c8:	9a 8f       	std	Y+26, r25	; 0x1a
    18ca:	ab 8f       	std	Y+27, r26	; 0x1b
    18cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ce:	69 8d       	ldd	r22, Y+25	; 0x19
    18d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	4a e7       	ldi	r20, 0x7A	; 122
    18dc:	53 e4       	ldi	r21, 0x43	; 67
    18de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	8d 8b       	std	Y+21, r24	; 0x15
    18e8:	9e 8b       	std	Y+22, r25	; 0x16
    18ea:	af 8b       	std	Y+23, r26	; 0x17
    18ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18ee:	6d 89       	ldd	r22, Y+21	; 0x15
    18f0:	7e 89       	ldd	r23, Y+22	; 0x16
    18f2:	8f 89       	ldd	r24, Y+23	; 0x17
    18f4:	98 8d       	ldd	r25, Y+24	; 0x18
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e8       	ldi	r20, 0x80	; 128
    18fc:	5f e3       	ldi	r21, 0x3F	; 63
    18fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1902:	88 23       	and	r24, r24
    1904:	2c f4       	brge	.+10     	; 0x1910 <LCD_sendCommand+0x262>
		__ticks = 1;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	9c 8b       	std	Y+20, r25	; 0x14
    190c:	8b 8b       	std	Y+19, r24	; 0x13
    190e:	3f c0       	rjmp	.+126    	; 0x198e <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1910:	6d 89       	ldd	r22, Y+21	; 0x15
    1912:	7e 89       	ldd	r23, Y+22	; 0x16
    1914:	8f 89       	ldd	r24, Y+23	; 0x17
    1916:	98 8d       	ldd	r25, Y+24	; 0x18
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	3f ef       	ldi	r19, 0xFF	; 255
    191c:	4f e7       	ldi	r20, 0x7F	; 127
    191e:	57 e4       	ldi	r21, 0x47	; 71
    1920:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1924:	18 16       	cp	r1, r24
    1926:	4c f5       	brge	.+82     	; 0x197a <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1928:	69 8d       	ldd	r22, Y+25	; 0x19
    192a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    192c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    192e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e2       	ldi	r20, 0x20	; 32
    1936:	51 e4       	ldi	r21, 0x41	; 65
    1938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	bc 01       	movw	r22, r24
    1942:	cd 01       	movw	r24, r26
    1944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	9c 8b       	std	Y+20, r25	; 0x14
    194e:	8b 8b       	std	Y+19, r24	; 0x13
    1950:	0f c0       	rjmp	.+30     	; 0x1970 <LCD_sendCommand+0x2c2>
    1952:	89 e1       	ldi	r24, 0x19	; 25
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	9a 8b       	std	Y+18, r25	; 0x12
    1958:	89 8b       	std	Y+17, r24	; 0x11
    195a:	89 89       	ldd	r24, Y+17	; 0x11
    195c:	9a 89       	ldd	r25, Y+18	; 0x12
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <LCD_sendCommand+0x2b0>
    1962:	9a 8b       	std	Y+18, r25	; 0x12
    1964:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1966:	8b 89       	ldd	r24, Y+19	; 0x13
    1968:	9c 89       	ldd	r25, Y+20	; 0x14
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	9c 8b       	std	Y+20, r25	; 0x14
    196e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1970:	8b 89       	ldd	r24, Y+19	; 0x13
    1972:	9c 89       	ldd	r25, Y+20	; 0x14
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	69 f7       	brne	.-38     	; 0x1952 <LCD_sendCommand+0x2a4>
    1978:	14 c0       	rjmp	.+40     	; 0x19a2 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197a:	6d 89       	ldd	r22, Y+21	; 0x15
    197c:	7e 89       	ldd	r23, Y+22	; 0x16
    197e:	8f 89       	ldd	r24, Y+23	; 0x17
    1980:	98 8d       	ldd	r25, Y+24	; 0x18
    1982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	9c 8b       	std	Y+20, r25	; 0x14
    198c:	8b 8b       	std	Y+19, r24	; 0x13
    198e:	8b 89       	ldd	r24, Y+19	; 0x13
    1990:	9c 89       	ldd	r25, Y+20	; 0x14
    1992:	98 8b       	std	Y+16, r25	; 0x10
    1994:	8f 87       	std	Y+15, r24	; 0x0f
    1996:	8f 85       	ldd	r24, Y+15	; 0x0f
    1998:	98 89       	ldd	r25, Y+16	; 0x10
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <LCD_sendCommand+0x2ec>
    199e:	98 8b       	std	Y+16, r25	; 0x10
    19a0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    19a2:	a5 e3       	ldi	r26, 0x35	; 53
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e5 e3       	ldi	r30, 0x35	; 53
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	8b 7f       	andi	r24, 0xFB	; 251
    19ae:	8c 93       	st	X, r24
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 e8       	ldi	r26, 0x80	; 128
    19b6:	bf e3       	ldi	r27, 0x3F	; 63
    19b8:	8b 87       	std	Y+11, r24	; 0x0b
    19ba:	9c 87       	std	Y+12, r25	; 0x0c
    19bc:	ad 87       	std	Y+13, r26	; 0x0d
    19be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	4a e7       	ldi	r20, 0x7A	; 122
    19ce:	53 e4       	ldi	r21, 0x43	; 67
    19d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	8f 83       	std	Y+7, r24	; 0x07
    19da:	98 87       	std	Y+8, r25	; 0x08
    19dc:	a9 87       	std	Y+9, r26	; 0x09
    19de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e0:	6f 81       	ldd	r22, Y+7	; 0x07
    19e2:	78 85       	ldd	r23, Y+8	; 0x08
    19e4:	89 85       	ldd	r24, Y+9	; 0x09
    19e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e8       	ldi	r20, 0x80	; 128
    19ee:	5f e3       	ldi	r21, 0x3F	; 63
    19f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <LCD_sendCommand+0x354>
		__ticks = 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9e 83       	std	Y+6, r25	; 0x06
    19fe:	8d 83       	std	Y+5, r24	; 0x05
    1a00:	3f c0       	rjmp	.+126    	; 0x1a80 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1a02:	6f 81       	ldd	r22, Y+7	; 0x07
    1a04:	78 85       	ldd	r23, Y+8	; 0x08
    1a06:	89 85       	ldd	r24, Y+9	; 0x09
    1a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	4c f5       	brge	.+82     	; 0x1a6c <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e2       	ldi	r20, 0x20	; 32
    1a28:	51 e4       	ldi	r21, 0x41	; 65
    1a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	bc 01       	movw	r22, r24
    1a34:	cd 01       	movw	r24, r26
    1a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	9e 83       	std	Y+6, r25	; 0x06
    1a40:	8d 83       	std	Y+5, r24	; 0x05
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <LCD_sendCommand+0x3b4>
    1a44:	89 e1       	ldi	r24, 0x19	; 25
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9c 83       	std	Y+4, r25	; 0x04
    1a4a:	8b 83       	std	Y+3, r24	; 0x03
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCD_sendCommand+0x3a2>
    1a54:	9c 83       	std	Y+4, r25	; 0x04
    1a56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a58:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	9e 83       	std	Y+6, r25	; 0x06
    1a60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	9e 81       	ldd	r25, Y+6	; 0x06
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	69 f7       	brne	.-38     	; 0x1a44 <LCD_sendCommand+0x396>
    1a6a:	14 c0       	rjmp	.+40     	; 0x1a94 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6e:	78 85       	ldd	r23, Y+8	; 0x08
    1a70:	89 85       	ldd	r24, Y+9	; 0x09
    1a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	9a 83       	std	Y+2, r25	; 0x02
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_sendCommand+0x3de>
    1a90:	9a 83       	std	Y+2, r25	; 0x02
    1a92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1a94:	e9 96       	adiw	r28, 0x39	; 57
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	e9 97       	sbiw	r28, 0x39	; 57
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1abc:	a5 e3       	ldi	r26, 0x35	; 53
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e5 e3       	ldi	r30, 0x35	; 53
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	81 60       	ori	r24, 0x01	; 1
    1ac8:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1aca:	a5 e3       	ldi	r26, 0x35	; 53
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e5 e3       	ldi	r30, 0x35	; 53
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8d 7f       	andi	r24, 0xFD	; 253
    1ad6:	8c 93       	st	X, r24
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	a0 e8       	ldi	r26, 0x80	; 128
    1ade:	bf e3       	ldi	r27, 0x3F	; 63
    1ae0:	8d ab       	std	Y+53, r24	; 0x35
    1ae2:	9e ab       	std	Y+54, r25	; 0x36
    1ae4:	af ab       	std	Y+55, r26	; 0x37
    1ae6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aea:	7e a9       	ldd	r23, Y+54	; 0x36
    1aec:	8f a9       	ldd	r24, Y+55	; 0x37
    1aee:	98 ad       	ldd	r25, Y+56	; 0x38
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	4a e7       	ldi	r20, 0x7A	; 122
    1af6:	53 e4       	ldi	r21, 0x43	; 67
    1af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	89 ab       	std	Y+49, r24	; 0x31
    1b02:	9a ab       	std	Y+50, r25	; 0x32
    1b04:	ab ab       	std	Y+51, r26	; 0x33
    1b06:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b08:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e8       	ldi	r20, 0x80	; 128
    1b16:	5f e3       	ldi	r21, 0x3F	; 63
    1b18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b1c:	88 23       	and	r24, r24
    1b1e:	2c f4       	brge	.+10     	; 0x1b2a <LCD_displayCharacter+0x84>
		__ticks = 1;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	98 ab       	std	Y+48, r25	; 0x30
    1b26:	8f a7       	std	Y+47, r24	; 0x2f
    1b28:	3f c0       	rjmp	.+126    	; 0x1ba8 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1b2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b30:	9c a9       	ldd	r25, Y+52	; 0x34
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	3f ef       	ldi	r19, 0xFF	; 255
    1b36:	4f e7       	ldi	r20, 0x7F	; 127
    1b38:	57 e4       	ldi	r21, 0x47	; 71
    1b3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b3e:	18 16       	cp	r1, r24
    1b40:	4c f5       	brge	.+82     	; 0x1b94 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b42:	6d a9       	ldd	r22, Y+53	; 0x35
    1b44:	7e a9       	ldd	r23, Y+54	; 0x36
    1b46:	8f a9       	ldd	r24, Y+55	; 0x37
    1b48:	98 ad       	ldd	r25, Y+56	; 0x38
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e2       	ldi	r20, 0x20	; 32
    1b50:	51 e4       	ldi	r21, 0x41	; 65
    1b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	bc 01       	movw	r22, r24
    1b5c:	cd 01       	movw	r24, r26
    1b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	98 ab       	std	Y+48, r25	; 0x30
    1b68:	8f a7       	std	Y+47, r24	; 0x2f
    1b6a:	0f c0       	rjmp	.+30     	; 0x1b8a <LCD_displayCharacter+0xe4>
    1b6c:	89 e1       	ldi	r24, 0x19	; 25
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9e a7       	std	Y+46, r25	; 0x2e
    1b72:	8d a7       	std	Y+45, r24	; 0x2d
    1b74:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b76:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <LCD_displayCharacter+0xd2>
    1b7c:	9e a7       	std	Y+46, r25	; 0x2e
    1b7e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b82:	98 a9       	ldd	r25, Y+48	; 0x30
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	98 ab       	std	Y+48, r25	; 0x30
    1b88:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	69 f7       	brne	.-38     	; 0x1b6c <LCD_displayCharacter+0xc6>
    1b92:	14 c0       	rjmp	.+40     	; 0x1bbc <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b94:	69 a9       	ldd	r22, Y+49	; 0x31
    1b96:	7a a9       	ldd	r23, Y+50	; 0x32
    1b98:	8b a9       	ldd	r24, Y+51	; 0x33
    1b9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	98 ab       	std	Y+48, r25	; 0x30
    1ba6:	8f a7       	std	Y+47, r24	; 0x2f
    1ba8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1baa:	98 a9       	ldd	r25, Y+48	; 0x30
    1bac:	9c a7       	std	Y+44, r25	; 0x2c
    1bae:	8b a7       	std	Y+43, r24	; 0x2b
    1bb0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bb2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <LCD_displayCharacter+0x10e>
    1bb8:	9c a7       	std	Y+44, r25	; 0x2c
    1bba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1bbc:	a5 e3       	ldi	r26, 0x35	; 53
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e5 e3       	ldi	r30, 0x35	; 53
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	84 60       	ori	r24, 0x04	; 4
    1bc8:	8c 93       	st	X, r24
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	a0 e8       	ldi	r26, 0x80	; 128
    1bd0:	bf e3       	ldi	r27, 0x3F	; 63
    1bd2:	8f a3       	std	Y+39, r24	; 0x27
    1bd4:	98 a7       	std	Y+40, r25	; 0x28
    1bd6:	a9 a7       	std	Y+41, r26	; 0x29
    1bd8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bda:	6f a1       	ldd	r22, Y+39	; 0x27
    1bdc:	78 a5       	ldd	r23, Y+40	; 0x28
    1bde:	89 a5       	ldd	r24, Y+41	; 0x29
    1be0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	4a e7       	ldi	r20, 0x7A	; 122
    1be8:	53 e4       	ldi	r21, 0x43	; 67
    1bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	8b a3       	std	Y+35, r24	; 0x23
    1bf4:	9c a3       	std	Y+36, r25	; 0x24
    1bf6:	ad a3       	std	Y+37, r26	; 0x25
    1bf8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bfa:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfe:	8d a1       	ldd	r24, Y+37	; 0x25
    1c00:	9e a1       	ldd	r25, Y+38	; 0x26
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e8       	ldi	r20, 0x80	; 128
    1c08:	5f e3       	ldi	r21, 0x3F	; 63
    1c0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c0e:	88 23       	and	r24, r24
    1c10:	2c f4       	brge	.+10     	; 0x1c1c <LCD_displayCharacter+0x176>
		__ticks = 1;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9a a3       	std	Y+34, r25	; 0x22
    1c18:	89 a3       	std	Y+33, r24	; 0x21
    1c1a:	3f c0       	rjmp	.+126    	; 0x1c9a <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1c1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c20:	8d a1       	ldd	r24, Y+37	; 0x25
    1c22:	9e a1       	ldd	r25, Y+38	; 0x26
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	3f ef       	ldi	r19, 0xFF	; 255
    1c28:	4f e7       	ldi	r20, 0x7F	; 127
    1c2a:	57 e4       	ldi	r21, 0x47	; 71
    1c2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c30:	18 16       	cp	r1, r24
    1c32:	4c f5       	brge	.+82     	; 0x1c86 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c34:	6f a1       	ldd	r22, Y+39	; 0x27
    1c36:	78 a5       	ldd	r23, Y+40	; 0x28
    1c38:	89 a5       	ldd	r24, Y+41	; 0x29
    1c3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e2       	ldi	r20, 0x20	; 32
    1c42:	51 e4       	ldi	r21, 0x41	; 65
    1c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	bc 01       	movw	r22, r24
    1c4e:	cd 01       	movw	r24, r26
    1c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	9a a3       	std	Y+34, r25	; 0x22
    1c5a:	89 a3       	std	Y+33, r24	; 0x21
    1c5c:	0f c0       	rjmp	.+30     	; 0x1c7c <LCD_displayCharacter+0x1d6>
    1c5e:	89 e1       	ldi	r24, 0x19	; 25
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	98 a3       	std	Y+32, r25	; 0x20
    1c64:	8f 8f       	std	Y+31, r24	; 0x1f
    1c66:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c68:	98 a1       	ldd	r25, Y+32	; 0x20
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <LCD_displayCharacter+0x1c4>
    1c6e:	98 a3       	std	Y+32, r25	; 0x20
    1c70:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c72:	89 a1       	ldd	r24, Y+33	; 0x21
    1c74:	9a a1       	ldd	r25, Y+34	; 0x22
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	9a a3       	std	Y+34, r25	; 0x22
    1c7a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c7e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	69 f7       	brne	.-38     	; 0x1c5e <LCD_displayCharacter+0x1b8>
    1c84:	14 c0       	rjmp	.+40     	; 0x1cae <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c86:	6b a1       	ldd	r22, Y+35	; 0x23
    1c88:	7c a1       	ldd	r23, Y+36	; 0x24
    1c8a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	9a a3       	std	Y+34, r25	; 0x22
    1c98:	89 a3       	std	Y+33, r24	; 0x21
    1c9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c9e:	9e 8f       	std	Y+30, r25	; 0x1e
    1ca0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ca2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ca4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <LCD_displayCharacter+0x200>
    1caa:	9e 8f       	std	Y+30, r25	; 0x1e
    1cac:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    1cae:	eb e3       	ldi	r30, 0x3B	; 59
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	89 ad       	ldd	r24, Y+57	; 0x39
    1cb4:	80 83       	st	Z, r24
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a0 e8       	ldi	r26, 0x80	; 128
    1cbc:	bf e3       	ldi	r27, 0x3F	; 63
    1cbe:	89 8f       	std	Y+25, r24	; 0x19
    1cc0:	9a 8f       	std	Y+26, r25	; 0x1a
    1cc2:	ab 8f       	std	Y+27, r26	; 0x1b
    1cc4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc6:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ccc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	4a e7       	ldi	r20, 0x7A	; 122
    1cd4:	53 e4       	ldi	r21, 0x43	; 67
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	8d 8b       	std	Y+21, r24	; 0x15
    1ce0:	9e 8b       	std	Y+22, r25	; 0x16
    1ce2:	af 8b       	std	Y+23, r26	; 0x17
    1ce4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ce6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cea:	8f 89       	ldd	r24, Y+23	; 0x17
    1cec:	98 8d       	ldd	r25, Y+24	; 0x18
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e8       	ldi	r20, 0x80	; 128
    1cf4:	5f e3       	ldi	r21, 0x3F	; 63
    1cf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cfa:	88 23       	and	r24, r24
    1cfc:	2c f4       	brge	.+10     	; 0x1d08 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9c 8b       	std	Y+20, r25	; 0x14
    1d04:	8b 8b       	std	Y+19, r24	; 0x13
    1d06:	3f c0       	rjmp	.+126    	; 0x1d86 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1d08:	6d 89       	ldd	r22, Y+21	; 0x15
    1d0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	3f ef       	ldi	r19, 0xFF	; 255
    1d14:	4f e7       	ldi	r20, 0x7F	; 127
    1d16:	57 e4       	ldi	r21, 0x47	; 71
    1d18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d1c:	18 16       	cp	r1, r24
    1d1e:	4c f5       	brge	.+82     	; 0x1d72 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d20:	69 8d       	ldd	r22, Y+25	; 0x19
    1d22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e2       	ldi	r20, 0x20	; 32
    1d2e:	51 e4       	ldi	r21, 0x41	; 65
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	9c 8b       	std	Y+20, r25	; 0x14
    1d46:	8b 8b       	std	Y+19, r24	; 0x13
    1d48:	0f c0       	rjmp	.+30     	; 0x1d68 <LCD_displayCharacter+0x2c2>
    1d4a:	89 e1       	ldi	r24, 0x19	; 25
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	9a 8b       	std	Y+18, r25	; 0x12
    1d50:	89 8b       	std	Y+17, r24	; 0x11
    1d52:	89 89       	ldd	r24, Y+17	; 0x11
    1d54:	9a 89       	ldd	r25, Y+18	; 0x12
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <LCD_displayCharacter+0x2b0>
    1d5a:	9a 8b       	std	Y+18, r25	; 0x12
    1d5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d60:	9c 89       	ldd	r25, Y+20	; 0x14
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	9c 8b       	std	Y+20, r25	; 0x14
    1d66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d68:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	69 f7       	brne	.-38     	; 0x1d4a <LCD_displayCharacter+0x2a4>
    1d70:	14 c0       	rjmp	.+40     	; 0x1d9a <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d72:	6d 89       	ldd	r22, Y+21	; 0x15
    1d74:	7e 89       	ldd	r23, Y+22	; 0x16
    1d76:	8f 89       	ldd	r24, Y+23	; 0x17
    1d78:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	9c 8b       	std	Y+20, r25	; 0x14
    1d84:	8b 8b       	std	Y+19, r24	; 0x13
    1d86:	8b 89       	ldd	r24, Y+19	; 0x13
    1d88:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8a:	98 8b       	std	Y+16, r25	; 0x10
    1d8c:	8f 87       	std	Y+15, r24	; 0x0f
    1d8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d90:	98 89       	ldd	r25, Y+16	; 0x10
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <LCD_displayCharacter+0x2ec>
    1d96:	98 8b       	std	Y+16, r25	; 0x10
    1d98:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1d9a:	a5 e3       	ldi	r26, 0x35	; 53
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e5 e3       	ldi	r30, 0x35	; 53
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	8b 7f       	andi	r24, 0xFB	; 251
    1da6:	8c 93       	st	X, r24
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a0 e8       	ldi	r26, 0x80	; 128
    1dae:	bf e3       	ldi	r27, 0x3F	; 63
    1db0:	8b 87       	std	Y+11, r24	; 0x0b
    1db2:	9c 87       	std	Y+12, r25	; 0x0c
    1db4:	ad 87       	std	Y+13, r26	; 0x0d
    1db6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	4a e7       	ldi	r20, 0x7A	; 122
    1dc6:	53 e4       	ldi	r21, 0x43	; 67
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	8f 83       	std	Y+7, r24	; 0x07
    1dd2:	98 87       	std	Y+8, r25	; 0x08
    1dd4:	a9 87       	std	Y+9, r26	; 0x09
    1dd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dda:	78 85       	ldd	r23, Y+8	; 0x08
    1ddc:	89 85       	ldd	r24, Y+9	; 0x09
    1dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e8       	ldi	r20, 0x80	; 128
    1de6:	5f e3       	ldi	r21, 0x3F	; 63
    1de8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dec:	88 23       	and	r24, r24
    1dee:	2c f4       	brge	.+10     	; 0x1dfa <LCD_displayCharacter+0x354>
		__ticks = 1;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9e 83       	std	Y+6, r25	; 0x06
    1df6:	8d 83       	std	Y+5, r24	; 0x05
    1df8:	3f c0       	rjmp	.+126    	; 0x1e78 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1dfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfc:	78 85       	ldd	r23, Y+8	; 0x08
    1dfe:	89 85       	ldd	r24, Y+9	; 0x09
    1e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	3f ef       	ldi	r19, 0xFF	; 255
    1e06:	4f e7       	ldi	r20, 0x7F	; 127
    1e08:	57 e4       	ldi	r21, 0x47	; 71
    1e0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e0e:	18 16       	cp	r1, r24
    1e10:	4c f5       	brge	.+82     	; 0x1e64 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	40 e2       	ldi	r20, 0x20	; 32
    1e20:	51 e4       	ldi	r21, 0x41	; 65
    1e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	bc 01       	movw	r22, r24
    1e2c:	cd 01       	movw	r24, r26
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9e 83       	std	Y+6, r25	; 0x06
    1e38:	8d 83       	std	Y+5, r24	; 0x05
    1e3a:	0f c0       	rjmp	.+30     	; 0x1e5a <LCD_displayCharacter+0x3b4>
    1e3c:	89 e1       	ldi	r24, 0x19	; 25
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9c 83       	std	Y+4, r25	; 0x04
    1e42:	8b 83       	std	Y+3, r24	; 0x03
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <LCD_displayCharacter+0x3a2>
    1e4c:	9c 83       	std	Y+4, r25	; 0x04
    1e4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e50:	8d 81       	ldd	r24, Y+5	; 0x05
    1e52:	9e 81       	ldd	r25, Y+6	; 0x06
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	9e 83       	std	Y+6, r25	; 0x06
    1e58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	69 f7       	brne	.-38     	; 0x1e3c <LCD_displayCharacter+0x396>
    1e62:	14 c0       	rjmp	.+40     	; 0x1e8c <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e64:	6f 81       	ldd	r22, Y+7	; 0x07
    1e66:	78 85       	ldd	r23, Y+8	; 0x08
    1e68:	89 85       	ldd	r24, Y+9	; 0x09
    1e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
    1e78:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7c:	9a 83       	std	Y+2, r25	; 0x02
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	9a 81       	ldd	r25, Y+2	; 0x02
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <LCD_displayCharacter+0x3de>
    1e88:	9a 83       	std	Y+2, r25	; 0x02
    1e8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1e8c:	e9 96       	adiw	r28, 0x39	; 57
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <LCD_displayString+0x6>
    1ea4:	0f 92       	push	r0
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	9b 83       	std	Y+3, r25	; 0x03
    1eac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1eae:	19 82       	std	Y+1, r1	; 0x01
    1eb0:	0e c0       	rjmp	.+28     	; 0x1ece <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	e2 0f       	add	r30, r18
    1ec0:	f3 1f       	adc	r31, r19
    1ec2:	80 81       	ld	r24, Z
    1ec4:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LCD_displayCharacter>
		i++;
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	8f 5f       	subi	r24, 0xFF	; 255
    1ecc:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed8:	fc 01       	movw	r30, r24
    1eda:	e2 0f       	add	r30, r18
    1edc:	f3 1f       	adc	r31, r19
    1ede:	80 81       	ld	r24, Z
    1ee0:	88 23       	and	r24, r24
    1ee2:	39 f7       	brne	.-50     	; 0x1eb2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <LCD_goToRowColumn+0x6>
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <LCD_goToRowColumn+0x8>
    1ef8:	0f 92       	push	r0
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	8a 83       	std	Y+2, r24	; 0x02
    1f00:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	3d 83       	std	Y+5, r19	; 0x05
    1f0a:	2c 83       	std	Y+4, r18	; 0x04
    1f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f10:	81 30       	cpi	r24, 0x01	; 1
    1f12:	91 05       	cpc	r25, r1
    1f14:	c1 f0       	breq	.+48     	; 0x1f46 <LCD_goToRowColumn+0x56>
    1f16:	2c 81       	ldd	r18, Y+4	; 0x04
    1f18:	3d 81       	ldd	r19, Y+5	; 0x05
    1f1a:	22 30       	cpi	r18, 0x02	; 2
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	2c f4       	brge	.+10     	; 0x1f2a <LCD_goToRowColumn+0x3a>
    1f20:	8c 81       	ldd	r24, Y+4	; 0x04
    1f22:	9d 81       	ldd	r25, Y+5	; 0x05
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	61 f0       	breq	.+24     	; 0x1f40 <LCD_goToRowColumn+0x50>
    1f28:	19 c0       	rjmp	.+50     	; 0x1f5c <LCD_goToRowColumn+0x6c>
    1f2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f2e:	22 30       	cpi	r18, 0x02	; 2
    1f30:	31 05       	cpc	r19, r1
    1f32:	69 f0       	breq	.+26     	; 0x1f4e <LCD_goToRowColumn+0x5e>
    1f34:	8c 81       	ldd	r24, Y+4	; 0x04
    1f36:	9d 81       	ldd	r25, Y+5	; 0x05
    1f38:	83 30       	cpi	r24, 0x03	; 3
    1f3a:	91 05       	cpc	r25, r1
    1f3c:	61 f0       	breq	.+24     	; 0x1f56 <LCD_goToRowColumn+0x66>
    1f3e:	0e c0       	rjmp	.+28     	; 0x1f5c <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	89 83       	std	Y+1, r24	; 0x01
    1f44:	0b c0       	rjmp	.+22     	; 0x1f5c <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	80 5c       	subi	r24, 0xC0	; 192
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    1f4c:	07 c0       	rjmp	.+14     	; 0x1f5c <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	80 5f       	subi	r24, 0xF0	; 240
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	03 c0       	rjmp	.+6      	; 0x1f5c <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	80 5b       	subi	r24, 0xB0	; 176
    1f5a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	80 68       	ori	r24, 0x80	; 128
    1f60:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_sendCommand>
}
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <LCD_displayStringRowColumn+0x6>
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <LCD_displayStringRowColumn+0x8>
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	6a 83       	std	Y+2, r22	; 0x02
    1f84:	5c 83       	std	Y+4, r21	; 0x04
    1f86:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	6a 81       	ldd	r22, Y+2	; 0x02
    1f8c:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	9c 81       	ldd	r25, Y+4	; 0x04
    1f94:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LCD_displayString>
}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	08 95       	ret

00001fa6 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	62 97       	sbiw	r28, 0x12	; 18
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61
    1fba:	9a 8b       	std	Y+18, r25	; 0x12
    1fbc:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1fbe:	89 89       	ldd	r24, Y+17	; 0x11
    1fc0:	9a 89       	ldd	r25, Y+18	; 0x12
    1fc2:	9e 01       	movw	r18, r28
    1fc4:	2f 5f       	subi	r18, 0xFF	; 255
    1fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc8:	b9 01       	movw	r22, r18
    1fca:	4a e0       	ldi	r20, 0x0A	; 10
    1fcc:	50 e0       	ldi	r21, 0x00	; 0
    1fce:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <itoa>
   LCD_displayString(buff);
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LCD_displayString>
}
    1fda:	62 96       	adiw	r28, 0x12	; 18
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_sendCommand>
}
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2008:	eb e2       	ldi	r30, 0x2B	; 43
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2010:	ea e2       	ldi	r30, 0x2A	; 42
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	88 e1       	ldi	r24, 0x18	; 24
    2016:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2018:	e0 e4       	ldi	r30, 0x40	; 64
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	86 e8       	ldi	r24, 0x86	; 134
    201e:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2020:	e0 e4       	ldi	r30, 0x40	; 64
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2026:	e9 e2       	ldi	r30, 0x29	; 41
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	8c e0       	ldi	r24, 0x0C	; 12
    202c:	80 83       	st	Z, r24
}
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	0f 92       	push	r0
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2040:	eb e2       	ldi	r30, 0x2B	; 43
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	88 2f       	mov	r24, r24
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	80 72       	andi	r24, 0x20	; 32
    204c:	90 70       	andi	r25, 0x00	; 0
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	b9 f3       	breq	.-18     	; 0x2040 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2052:	ec e2       	ldi	r30, 0x2C	; 44
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    205a:	0f 90       	pop	r0
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    206a:	eb e2       	ldi	r30, 0x2B	; 43
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	88 23       	and	r24, r24
    2072:	dc f7       	brge	.-10     	; 0x206a <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2074:	ec e2       	ldi	r30, 0x2C	; 44
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
}
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	00 d0       	rcall	.+0      	; 0x2086 <UART_sendString+0x6>
    2086:	0f 92       	push	r0
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	9b 83       	std	Y+3, r25	; 0x03
    208e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2090:	19 82       	std	Y+1, r1	; 0x01
    2092:	0e c0       	rjmp	.+28     	; 0x20b0 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	28 2f       	mov	r18, r24
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	9b 81       	ldd	r25, Y+3	; 0x03
    209e:	fc 01       	movw	r30, r24
    20a0:	e2 0f       	add	r30, r18
    20a2:	f3 1f       	adc	r31, r19
    20a4:	80 81       	ld	r24, Z
    20a6:	0e 94 1a 10 	call	0x2034	; 0x2034 <UART_sendByte>
		i++;
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	8f 5f       	subi	r24, 0xFF	; 255
    20ae:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ba:	fc 01       	movw	r30, r24
    20bc:	e2 0f       	add	r30, r18
    20be:	f3 1f       	adc	r31, r19
    20c0:	80 81       	ld	r24, Z
    20c2:	88 23       	and	r24, r24
    20c4:	39 f7       	brne	.-50     	; 0x2094 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    20d2:	0f 93       	push	r16
    20d4:	1f 93       	push	r17
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	00 d0       	rcall	.+0      	; 0x20dc <UART_receiveString+0xa>
    20dc:	0f 92       	push	r0
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	9b 83       	std	Y+3, r25	; 0x03
    20e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    20e6:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	9b 81       	ldd	r25, Y+3	; 0x03
    20f2:	8c 01       	movw	r16, r24
    20f4:	02 0f       	add	r16, r18
    20f6:	13 1f       	adc	r17, r19
    20f8:	0e 94 31 10 	call	0x2062	; 0x2062 <UART_recieveByte>
    20fc:	f8 01       	movw	r30, r16
    20fe:	80 83       	st	Z, r24
    2100:	0f c0       	rjmp	.+30     	; 0x2120 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	8f 5f       	subi	r24, 0xFF	; 255
    2106:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	9b 81       	ldd	r25, Y+3	; 0x03
    2112:	8c 01       	movw	r16, r24
    2114:	02 0f       	add	r16, r18
    2116:	13 1f       	adc	r17, r19
    2118:	0e 94 31 10 	call	0x2062	; 0x2062 <UART_recieveByte>
    211c:	f8 01       	movw	r30, r16
    211e:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	9b 81       	ldd	r25, Y+3	; 0x03
    212a:	fc 01       	movw	r30, r24
    212c:	e2 0f       	add	r30, r18
    212e:	f3 1f       	adc	r31, r19
    2130:	80 81       	ld	r24, Z
    2132:	83 32       	cpi	r24, 0x23	; 35
    2134:	31 f7       	brne	.-52     	; 0x2102 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	9b 81       	ldd	r25, Y+3	; 0x03
    2140:	fc 01       	movw	r30, r24
    2142:	e2 0f       	add	r30, r18
    2144:	f3 1f       	adc	r31, r19
    2146:	10 82       	st	Z, r1
}
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	1f 91       	pop	r17
    2154:	0f 91       	pop	r16
    2156:	08 95       	ret

00002158 <__prologue_saves__>:
    2158:	2f 92       	push	r2
    215a:	3f 92       	push	r3
    215c:	4f 92       	push	r4
    215e:	5f 92       	push	r5
    2160:	6f 92       	push	r6
    2162:	7f 92       	push	r7
    2164:	8f 92       	push	r8
    2166:	9f 92       	push	r9
    2168:	af 92       	push	r10
    216a:	bf 92       	push	r11
    216c:	cf 92       	push	r12
    216e:	df 92       	push	r13
    2170:	ef 92       	push	r14
    2172:	ff 92       	push	r15
    2174:	0f 93       	push	r16
    2176:	1f 93       	push	r17
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	ca 1b       	sub	r28, r26
    2182:	db 0b       	sbc	r29, r27
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	09 94       	ijmp

00002190 <__epilogue_restores__>:
    2190:	2a 88       	ldd	r2, Y+18	; 0x12
    2192:	39 88       	ldd	r3, Y+17	; 0x11
    2194:	48 88       	ldd	r4, Y+16	; 0x10
    2196:	5f 84       	ldd	r5, Y+15	; 0x0f
    2198:	6e 84       	ldd	r6, Y+14	; 0x0e
    219a:	7d 84       	ldd	r7, Y+13	; 0x0d
    219c:	8c 84       	ldd	r8, Y+12	; 0x0c
    219e:	9b 84       	ldd	r9, Y+11	; 0x0b
    21a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    21a2:	b9 84       	ldd	r11, Y+9	; 0x09
    21a4:	c8 84       	ldd	r12, Y+8	; 0x08
    21a6:	df 80       	ldd	r13, Y+7	; 0x07
    21a8:	ee 80       	ldd	r14, Y+6	; 0x06
    21aa:	fd 80       	ldd	r15, Y+5	; 0x05
    21ac:	0c 81       	ldd	r16, Y+4	; 0x04
    21ae:	1b 81       	ldd	r17, Y+3	; 0x03
    21b0:	aa 81       	ldd	r26, Y+2	; 0x02
    21b2:	b9 81       	ldd	r27, Y+1	; 0x01
    21b4:	ce 0f       	add	r28, r30
    21b6:	d1 1d       	adc	r29, r1
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	ed 01       	movw	r28, r26
    21c4:	08 95       	ret

000021c6 <itoa>:
    21c6:	fb 01       	movw	r30, r22
    21c8:	9f 01       	movw	r18, r30
    21ca:	e8 94       	clt
    21cc:	42 30       	cpi	r20, 0x02	; 2
    21ce:	c4 f0       	brlt	.+48     	; 0x2200 <itoa+0x3a>
    21d0:	45 32       	cpi	r20, 0x25	; 37
    21d2:	b4 f4       	brge	.+44     	; 0x2200 <itoa+0x3a>
    21d4:	4a 30       	cpi	r20, 0x0A	; 10
    21d6:	29 f4       	brne	.+10     	; 0x21e2 <itoa+0x1c>
    21d8:	97 fb       	bst	r25, 7
    21da:	1e f4       	brtc	.+6      	; 0x21e2 <itoa+0x1c>
    21dc:	90 95       	com	r25
    21de:	81 95       	neg	r24
    21e0:	9f 4f       	sbci	r25, 0xFF	; 255
    21e2:	64 2f       	mov	r22, r20
    21e4:	77 27       	eor	r23, r23
    21e6:	0e 94 14 11 	call	0x2228	; 0x2228 <__udivmodhi4>
    21ea:	80 5d       	subi	r24, 0xD0	; 208
    21ec:	8a 33       	cpi	r24, 0x3A	; 58
    21ee:	0c f0       	brlt	.+2      	; 0x21f2 <itoa+0x2c>
    21f0:	89 5d       	subi	r24, 0xD9	; 217
    21f2:	81 93       	st	Z+, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	a1 f7       	brne	.-24     	; 0x21e2 <itoa+0x1c>
    21fa:	16 f4       	brtc	.+4      	; 0x2200 <itoa+0x3a>
    21fc:	5d e2       	ldi	r21, 0x2D	; 45
    21fe:	51 93       	st	Z+, r21
    2200:	10 82       	st	Z, r1
    2202:	c9 01       	movw	r24, r18
    2204:	0c 94 04 11 	jmp	0x2208	; 0x2208 <strrev>

00002208 <strrev>:
    2208:	dc 01       	movw	r26, r24
    220a:	fc 01       	movw	r30, r24
    220c:	67 2f       	mov	r22, r23
    220e:	71 91       	ld	r23, Z+
    2210:	77 23       	and	r23, r23
    2212:	e1 f7       	brne	.-8      	; 0x220c <strrev+0x4>
    2214:	32 97       	sbiw	r30, 0x02	; 2
    2216:	04 c0       	rjmp	.+8      	; 0x2220 <strrev+0x18>
    2218:	7c 91       	ld	r23, X
    221a:	6d 93       	st	X+, r22
    221c:	70 83       	st	Z, r23
    221e:	62 91       	ld	r22, -Z
    2220:	ae 17       	cp	r26, r30
    2222:	bf 07       	cpc	r27, r31
    2224:	c8 f3       	brcs	.-14     	; 0x2218 <strrev+0x10>
    2226:	08 95       	ret

00002228 <__udivmodhi4>:
    2228:	aa 1b       	sub	r26, r26
    222a:	bb 1b       	sub	r27, r27
    222c:	51 e1       	ldi	r21, 0x11	; 17
    222e:	07 c0       	rjmp	.+14     	; 0x223e <__udivmodhi4_ep>

00002230 <__udivmodhi4_loop>:
    2230:	aa 1f       	adc	r26, r26
    2232:	bb 1f       	adc	r27, r27
    2234:	a6 17       	cp	r26, r22
    2236:	b7 07       	cpc	r27, r23
    2238:	10 f0       	brcs	.+4      	; 0x223e <__udivmodhi4_ep>
    223a:	a6 1b       	sub	r26, r22
    223c:	b7 0b       	sbc	r27, r23

0000223e <__udivmodhi4_ep>:
    223e:	88 1f       	adc	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	5a 95       	dec	r21
    2244:	a9 f7       	brne	.-22     	; 0x2230 <__udivmodhi4_loop>
    2246:	80 95       	com	r24
    2248:	90 95       	com	r25
    224a:	bc 01       	movw	r22, r24
    224c:	cd 01       	movw	r24, r26
    224e:	08 95       	ret

00002250 <_exit>:
    2250:	f8 94       	cli

00002252 <__stop_program>:
    2252:	ff cf       	rjmp	.-2      	; 0x2252 <__stop_program>
